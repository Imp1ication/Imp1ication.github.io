<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>榨乾蘋果的剩餘價值，MacBuuk Air的誕生</title>
    <url>/2023/01/03/%E6%A6%A8%E4%B9%BE%E8%98%8B%E6%9E%9C%E7%9A%84%E5%89%A9%E9%A4%98%E5%83%B9%E5%80%BC%EF%BC%8CMacBuuk-Air%E7%9A%84%E8%AA%95%E7%94%9F/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>於老舊 MacBook 上安裝 Ubuntu 20.04 LTS。<blockquote>
<p><em>注意：這裡指的是將 MacOS 洗掉並整機重灌成 Ubuntu，而非虛擬機或雙系統。</em></p>
</blockquote>
</li>
<li>將 Ubuntu 的桌面環境改造成類似 MacOS BigSur 的樣子。</li>
<li>設置類 MocOS 桌面工具。</li>
<li>個人快捷鍵與多點觸控手勢配置。</li>
<li>結果預覽：<br><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgomacbuuk-overview.jpg"></li>
</ul>
<h2 id="前言-aka-廢話"><a href="#前言-aka-廢話" class="headerlink" title="前言 aka. 廢話"></a>前言 <font color=gray size=1>aka. 廢話</font></h2><p>2014年暑假，我得到了人生中的第一台筆電：13 英吋的 MacBook Air ( MBA )。我永遠忘不了初次打開筆電時所感受到的那股悸動，自那之後，我就成為了鋼鐵果粉，只要身邊有人想換筆電，我的建議就只剩下：「唯一選擇 MacBook，一台抵十年。」</p>
<p>而為了成為一個言而有信的果粉，我打算身體力行，好好地徹底壓榨這台筆電整整十年。</p>
<p>然而，自從 2020 年更新了 MacOS BigSur 之後，MBA 它就像更年期到了一樣：反應開始變得遲鈍，而且不知道為什麼，光是系統資源就吃掉了硬碟 100 多 GB，重灌無解。</p>
<p>這讓我陷入掙扎：難道一直以來我都錯了嗎？</p>
<p>我的信念開始崩解，直到 2022 的 BTS 活動，就在我即將鑄下大錯之際，我的信念隨著一道閃過眼前的紫橘色光芒開始扭曲。</p>
<p>於是，一個內顯仍處於舊時代，外顯卻跟上新潮流的怪物：MacBuuk Air 就這麼誕生了。它幾乎變得就像我們初相遇之時，那樣流暢、那樣完美。</p>
<p>なんと……なんと素晴らしい……</p>
<h2 id="設備需求"><a href="#設備需求" class="headerlink" title="設備需求"></a>設備需求</h2><ul>
<li>一台已經菠蘿菠蘿噠的 MacBook。</li>
<li>一個大於 4GB 的 USB 隨身碟。</li>
<li>能讓 MacBook 接上有線網路的設備（我的方法是一條乙太轉 USB 的轉接頭）。</li>
</ul>
<blockquote>
<p><em>注意：以下的操作會把 MacBook 和 USB 中的資料洗掉，請確認重要資料都已備份完畢。</em></p>
</blockquote>
<h2 id="安裝-Ubuntu-20-04-LTS"><a href="#安裝-Ubuntu-20-04-LTS" class="headerlink" title="安裝 Ubuntu 20.04 LTS"></a>安裝 Ubuntu 20.04 LTS</h2><h3 id="下載-Ubuntu-映像檔"><a href="#下載-Ubuntu-映像檔" class="headerlink" title="下載 Ubuntu 映像檔"></a>下載 Ubuntu 映像檔</h3><p>到 Ubuntu 官網，選擇要下載的版本和架構，點選開始下載即可。注意，以下的所有設置都是在 Ubuntu 20.04 LTS 版本上進行的，如果安裝的是其他版本，有些地方可能會不適用。</p>
<p><a href="https://www.ubuntu-tw.org/modules/tinyd0/">Ubuntu 官網連結 (點我)</a></p>
<p><img src="https://i.imgur.com/N8fFMPs.jpg"></p>
<h3 id="開機碟"><a href="#開機碟" class="headerlink" title="開機碟"></a>開機碟</h3><p>開機碟的製作方法很多，這裡只記錄我個人最常使用的方式：在 Windows PC 上使用 Rufus 製作。</p>
<p>如果你需要其他操作系統上的製作方式，可以到<a href="https://ithelp.ithome.com.tw/articles/10191497">這裡</a>看看。</p>
<blockquote>
<p>問：為什麼不在Mac上做？不對，等等，你不是自稱鋼鐵果粉，Windows PC？<br>閉嘴，遊戲機的事，能算不忠嗎？</p>
</blockquote>
<ol>
<li><p>下載 Rufus：<a href="https://rufus.ie/zh_TW/">下載連結 (點我)</a></p>
<p><img src="https://i.imgur.com/ZcLbAYo.jpg"></p>
</li>
<li><p>插入準備好的USB，開啟 Rufus，並在”裝置”欄位中選擇你的 USB。</p>
</li>
<li><p>點選開機模式右側的”選擇”按鈕，並選擇你剛才下載的 Ubuntu ISO 檔。</p>
</li>
<li><p>點選”執行”，並等待程式執行完成。</p>
<p><img src="https://i.imgur.com/ikJCyJ8.jpg"></p>
</li>
</ol>
<h3 id="安裝-rEFInd"><a href="#安裝-rEFInd" class="headerlink" title="安裝 rEFInd"></a>安裝 rEFInd</h3><p>有些過舊的 Mac 並不支援 USB 開機，所以這裡需要再額外安裝 rEFInd 來達成。</p>
<blockquote>
<p><em>注意：安裝 rEFInd 後開機就會自動導入 rEFInd的開機介面。</em></p>
</blockquote>
<ol>
<li><p>下載 rEFInd 並解壓縮：<a href="https://sourceforge.net/projects/refind/">下載連結 (點我)</a></p>
<p><img src="https://i.imgur.com/vHdy6Qk.jpg"></p>
</li>
<li><p>開啟終端機，將解壓縮後資料夾中的 refind-install 托拽進終端機中並按 Enter 執行，執行完畢即完成安裝。</p>
</li>
</ol>
<h3 id="安裝-Ubuntu"><a href="#安裝-Ubuntu" class="headerlink" title="安裝 Ubuntu"></a>安裝 Ubuntu</h3><ol>
<li><p>將 MacBook 關機，把剛才做好的 USB 插上後再開機，此時會進入 rEFInd 的開機畫面。</p>
<p><img src="https://i.imgur.com/TKu0G83.jpg"></p>
<blockquote>
<p><em>註：選擇右下角有 USB 圖示，描述帶有 EFI&#x2F;BOOT&#x2F;… 的那一個。</em></p>
</blockquote>
</li>
<li><p>選擇開機碟後即進入 Ubuntu 的安裝程序。 <font color=gray><em>(註：以下演示圖為透過虛擬機執行的畫面。)</em></font></p>
<p><img src="https://i.imgur.com/mytYbzk.jpg"></p>
<p><img src="https://i.imgur.com/1gA7J55.png"></p>
</li>
</ol>
<p>至此就不再對 Ubuntu 的安裝進行詳述了，只要按照頁面指示操作即可，唯須注意兩點：</p>
<ul>
<li>為日後使用方便，建議所有語言相關設置皆選擇英文。</li>
<li>Installation type 頁面會再次確認是否要完全抹除硬碟並安裝 Ubuntu，切記，再往前可就無法回頭了。</li>
</ul>
<h3 id="啟用-Wifi"><a href="#啟用-Wifi" class="headerlink" title="啟用 Wifi"></a>啟用 Wifi</h3><p>安裝完 Ubuntu 後，這時你可能會發現它連接不了 WiFi ，而且也無法進行設定。</p>
<p>這是因為 Ubuntu 20.04 預設安裝項目裡缺少了 MacBook 所使用的 WiFi 驅動，所以我們需要先接上有線網路，然後把驅動抓下來安裝。</p>
<blockquote>
<p>注意：接上網路後，會跳出建議進行系統更新的提示視窗，請按照指示進行更新。放心，這裡不是 Windows，你很安全。</p>
</blockquote>
<ol>
<li><p>接上有線網路，開啟 Additional Drivers 並安裝驅動。</p>
<p><img src="https://i.imgur.com/il0MFGW.png"></p>
<p><img src="https://i.imgur.com/Vnu8yB8.png"></p>
</li>
<li><p>如果 Additional Drivers 中找不到驅動，那就只能開啟終端機手動安裝。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get purge bcmwl-kernel-source</span><br><span class="line">sudo apt-get install firmware-b43-installer</span><br></pre></td></tr></table></figure>
</li>
<li><p>驅動安裝完並重開機後，就可以正常使用 WiFi 了。</p>
<p><img src="https://i.imgur.com/mYBsBzJ.png"></p>
</li>
</ol>
<h3 id="中文輸入法：新酷音"><a href="#中文輸入法：新酷音" class="headerlink" title="中文輸入法：新酷音"></a>中文輸入法：新酷音</h3><p>Ubuntu 內建是沒有注音輸入法的，所以我們需要另外進行安裝。</p>
<ol>
<li><p>開啟終端機輸入以下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install ibus-chewing -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新啟動電腦。</p>
</li>
<li><p>設置新酷音。</p>
<blockquote>
<p>進入語言設定。</p>
<p><img src="https://i.imgur.com/hauS8Ld.jpg"></p>
</blockquote>
<blockquote>
<p>選擇其他輸入法。</p>
<p><img src="https://i.imgur.com/cpSxXpX.jpg"></p>
<p><img src="https://i.imgur.com/9N14wo4.jpg"></p>
</blockquote>
<blockquote>
<p>選擇加入新酷音。</p>
<p><img src="https://i.imgur.com/QZQCixL.jpg"></p>
</blockquote>
</li>
</ol>
<p>如此一來，你就可以在右上角的圖示中選擇輸入法了，或是直接使用快捷鍵 (預設為 Super + Space，我個人習慣改成 Alt + Space) 進行輸入法切換。</p>
<p><img src="https://i.imgur.com/RzGzNyr.jpg"></p>
<h2 id="MacOS-Like-桌面外觀設置"><a href="#MacOS-Like-桌面外觀設置" class="headerlink" title="MacOS Like 桌面外觀設置"></a>MacOS Like 桌面外觀設置</h2><p>現在，我們已經有了一台 MacBook 皮，Linux 魂的詭異東西了，但這還不夠，我們要讓他的骨，也就是桌面環境，也都長得像 MacOS 才行。</p>
<h3 id="給自己留個活路：Timeshift"><a href="#給自己留個活路：Timeshift" class="headerlink" title="給自己留個活路：Timeshift"></a>給自己留個活路：Timeshift</h3><p>一頓爆改之下爆改難免出意外，預先備份，給自己留點活路吧。</p>
<ol>
<li><p>打開終端機，輸入以下指令，下載 Timeshift。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install timeshift</span><br></pre></td></tr></table></figure>
</li>
<li><p>開啟 Timeshift，並按以下操作進行備份。</p>
<blockquote>
<p>選擇備份類型</p>
<p><img src="https://i.imgur.com/Di3cckU.jpg"></p>
</blockquote>
<blockquote>
<p>選擇備份儲存位置</p>
<p><img src="https://i.imgur.com/rOjL0qE.jpg"></p>
</blockquote>
<blockquote>
<p>備份頻率</p>
<p><img src="https://i.imgur.com/twqyaLJ.jpg"></p>
</blockquote>
<blockquote>
<p>備份內容</p>
<p><img src="https://i.imgur.com/OpXet5E.jpg"></p>
</blockquote>
<blockquote>
<p>建立備份</p>
<p><img src="https://i.imgur.com/Sjbey9r.jpg"></p>
</blockquote>
<blockquote>
<p>等它跑完備份就完成了</p>
<p><img src="https://i.imgur.com/juPe8XG.jpg"></p>
</blockquote>
</li>
</ol>
<h3 id="外裝與扳手：Chrome-Gnome-Extention-CGE-和-Tweaks"><a href="#外裝與扳手：Chrome-Gnome-Extention-CGE-和-Tweaks" class="headerlink" title="外裝與扳手：Chrome Gnome Extention (CGE) 和 Tweaks"></a>外裝與扳手：Chrome Gnome Extention (CGE) 和 Tweaks</h3><p>CGE 和 Tweak 是兩個我們會用來改裝桌面的工具，如果把整個 Ubuntu 的桌面環境想像成瀏覽器的話，CGE 就像是外掛程式商店，我們會在這裡下載各式各樣的桌面外掛；而 Tweak 則是這些外掛的設定管理工具。</p>
<ol>
<li><p>在終端機輸入下面兩條指令來下載 CGE 和 Tweaks：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install chrome-gnome-shell</span><br><span class="line">sudo apt-get install gnome-tweaks -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>開啟FireFox，進入網址 <a href="extensions.gnome.org">extensions.gnome.org</a> 並安裝瀏覽器擴充元件。</p>
<p><img src="https://i.imgur.com/tCMD8rZ.jpg"></p>
</li>
</ol>
<h3 id="視窗外觀：WhiteSur-Gtk-Theme-與-User-Themes"><a href="#視窗外觀：WhiteSur-Gtk-Theme-與-User-Themes" class="headerlink" title="視窗外觀：WhiteSur Gtk Theme 與 User Themes"></a>視窗外觀：WhiteSur Gtk Theme 與 User Themes</h3><p>終於，我們可以動手來改裝它了。</p>
<p>首先，是到 <a href="gnome-look.org">gnome-look.org</a> 的 GTK3&#x2F;4 Themes 分類中下載一套你喜歡的視窗外觀。gnome-look 就是外觀商店，你可以在這裡免費下載包含主題、icon 等各式各樣的外觀造型。</p>
<p><img src="https://i.imgur.com/iWKviv6.jpg"></p>
<p>而既然我們是要仿製 Mac，自然就要下載 Mac 主題的外觀了，<a href="https://www.gnome-look.org/p/1403328/">WhiteSur</a> 和 <a href="https://www.gnome-look.org/p/1275087/">McMojave</a> 這兩款都很不錯，而我這裡使用的則是 WhiteSur 的 dark-solid 主題。</p>
<p><img src="https://i.imgur.com/hzfnUCJ.jpg"></p>
<ol>
<li><p>下載主題並解壓縮。</p>
<p><img src="https://i.imgur.com/NCOUZiX.jpg"></p>
</li>
<li><p>開啟終端機，輸入以下指令移動資料夾位置。<font color=gray><em>(註：指令中的”資料夾名稱”請按解壓縮後得到的資料夾的名稱填入)</em></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> Downloads/資料夾名稱 /usr/share/themes/</span><br></pre></td></tr></table></figure>
</li>
<li><p>開啟Tweaks，設置視窗主題。</p>
<p><img src="https://i.imgur.com/xZQ2JMD.jpg"></p>
</li>
<li><p>標題欄置左。</p>
<p><img src="https://i.imgur.com/vEbPz5S.jpg"></p>
<blockquote>
<p><em>註：Tweaks 在視窗小於一定寬度時會將左側的菜單欄隱藏，而標題欄置左會把這個隱藏的寬度變大，即它會變得更容易隱藏菜單。</em></p>
</blockquote>
</li>
<li><p>開啟 FireFox 裡的 gnome shell 外掛，下載並開啟 User Themes。</p>
<blockquote>
<p>搜尋 User Themes</p>
<p><img src="https://i.imgur.com/fBksH5s.jpg"></p>
</blockquote>
<blockquote>
<p>開啟並下載 User Themes</p>
<p><img src="https://i.imgur.com/34jzX9X.jpg"></p>
</blockquote>
<blockquote>
<p><img src="https://i.imgur.com/HFqPbWk.jpg"></p>
</blockquote>
</li>
<li><p>開啟 Tweaks，設置 Shell 主題。</p>
<p><img src="https://i.imgur.com/BOOV7OC.jpg"></p>
</li>
</ol>
<p>至此，你的應用程式視窗看起來應該就和 Mac 有 87% 像了。</p>
<h3 id="Icons：WhiteSur-icon-theme"><a href="#Icons：WhiteSur-icon-theme" class="headerlink" title="Icons：WhiteSur icon theme"></a>Icons：WhiteSur icon theme</h3><p>一樣的方法，到 gnome-look 找一套自己喜歡的 icon 下載吧，我這裡用的是 <a href="https://www.pling.com/p/1405756">WhiteSur icon theme</a>，另外還有 <a href="https://www.pling.com/p/1400021">Mkos-Big-Sur</a>、<a href="https://www.pling.com/p/1309810">OS Catalina</a>、和 <a href="https://www.pling.com/p/1305429/">Mc-Mojave-circle</a> 也都蠻不錯的。</p>
<p>當然你也可以全部都下載，每個禮拜換一套 icon 也是完全沒有問題的。</p>
<ol>
<li><p>下載、解壓縮。</p>
<p><img src="https://i.imgur.com/gkNV2Qe.jpg"></p>
</li>
<li><p>開啟終端機，輸入以下指令移動資料夾位置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> Downloads/WhiteSur /usr/share/icons/</span><br><span class="line">sudo <span class="built_in">mv</span> Downloads/WhiteSur-dark /usr/share/icons/</span><br></pre></td></tr></table></figure>
</li>
<li><p>開啟 Tweaks 設置 icons。</p>
<p><img src="https://i.imgur.com/IqgEKdq.jpg"></p>
</li>
</ol>
<h3 id="Cursor：macOS-Big-Sur"><a href="#Cursor：macOS-Big-Sur" class="headerlink" title="Cursor：macOS Big Sur"></a>Cursor：macOS Big Sur</h3><p>方法同上，我這裡用的是 <a href="https://www.gnome-look.org/p/1408466/">macOS Big Sur</a>，其他其實每個看起來都差不多，就不另外附上了。</p>
<ol>
<li><p>下載、解壓縮。</p>
<p><img src="https://i.imgur.com/t8uGn6B.jpg"></p>
</li>
<li><p>開啟終端機，輸入以下指令移動資料夾位置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> Downloads/macOS-BigSur-cursors /usr/share/icons/</span><br></pre></td></tr></table></figure>
</li>
<li><p>開啟 Tweaks 進行設置。</p>
<p><img src="https://i.imgur.com/Oxjwlg5.jpg"></p>
</li>
</ol>
<h3 id="Font：Roboto-Regular"><a href="#Font：Roboto-Regular" class="headerlink" title="Font：Roboto Regular"></a>Font：Roboto Regular</h3><p>蘋果官方使用的字體是 San Francisco Pro 和 Compact，但有版權問題不好取得，有人另外找了相近的字體 <a href="https://fonts.google.com/specimen/Roboto?query=robot">Roboto</a> ，蠻不錯的，所以我就跟著用了。</p>
<ol>
<li><p>下載字體並解壓縮。</p>
<p><img src="https://i.imgur.com/mYDXxSR.jpg"></p>
</li>
<li><p>雙擊字體檔案並安裝。</p>
<p><img src="https://i.imgur.com/mY1vDcA.jpg"></p>
</li>
<li><p>開啟 Tweaks 設定字體。</p>
<p><img src="https://i.imgur.com/WubDdkA.jpg"></p>
</li>
</ol>
<h3 id="Sound：MacOS-Syetem-Sounds"><a href="#Sound：MacOS-Syetem-Sounds" class="headerlink" title="Sound：MacOS Syetem Sounds"></a>Sound：MacOS Syetem Sounds</h3><p>開口就破功？不存在的。</p>
<ol>
<li><p>下載 <a href="https://www.pling.com/p/1891375/">MacOS System Sounds</a> 並解壓縮。</p>
<p><img src="https://i.imgur.com/kTTT7nx.jpg"></p>
</li>
<li><p>開啟終端機，輸入以下指令移動資料夾位置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> Downloads/MacOS\ Sounds/ /usr/share/sounds/</span><br></pre></td></tr></table></figure>
</li>
<li><p>開啟 Tweaks 設置。</p>
<p><img src="https://i.imgur.com/vjBWQXp.jpg"></p>
</li>
</ol>
<h3 id="WallPaper"><a href="#WallPaper" class="headerlink" title="WallPaper"></a>WallPaper</h3><p>不管飾品怎麼選，還是衣裝最顯眼。雖然我傾向放自己喜歡的背景圖，但如果有需要，Gnome-look 也提供了 BigSur 的官方背景可以下載。</p>
<ol>
<li><p>下載 <a href="https://www.pling.com/p/1398833">WhiteSur Wallpaper</a> 並解壓縮。</p>
<p><img src="https://i.imgur.com/50jwJsu.jpg"></p>
</li>
<li><p>開啟終端機，輸入以下指令移動資料夾位置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> Downloads/WhiteSur /usr/share/backgrounds/</span><br></pre></td></tr></table></figure>
</li>
<li><p>開啟 Tweaks 設置。</p>
<p><img src="https://i.imgur.com/T9wnWPq.jpg"></p>
</li>
</ol>
<h2 id="MacOS-Like-重點功能仿造"><a href="#MacOS-Like-重點功能仿造" class="headerlink" title="MacOS Like 重點功能仿造"></a>MacOS Like 重點功能仿造</h2><p>現在，你應該已經有了一台外觀與 Mac 有八成像的 MacBouk 了，但這還遠遠不夠，不要忘記，我們的目標可不是「長得像 Mac 的 Ubuntu」這種半吊子，我們要的，是老舊 Mac 的「重生」，是要讓我們自己用起來，都覺得它就是老舊 Mac 2.0 才行。</p>
<p>所以接下來，我們要來盡可能地仿製 Mac OS 大部分的重點功能。</p>
<h3 id="Dock：Plank"><a href="#Dock：Plank" class="headerlink" title="Dock：Plank"></a>Dock：Plank</h3><p>要做出像 Mac OS 的 Dock，我們需要下載程式 Plank，並用它來取代 Ubuntu 原本的 Dock。</p>
<p>或者，你可以用和 User Themes 類似的方式，到 gnome extensions 中安裝 <a href="https://extensions.gnome.org/extension/307/dash-to-dock/">Dash to Dock</a> 這款外掛，再到 Tweaks 中設置，效果也很不錯。但它設置起來比較麻煩，而且沒有 icon zoom 的功能，外觀也多少還是有些破綻，所以我就沒有使用它了。</p>
<ol>
<li><p>下載 Plank，並開啟。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ricotz/docky</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install plank -y</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/YOu2LvN.jpg"></p>
</li>
<li><p>下載 Plank Themes。</p>
<p>一樣到gnome-look上找一套自己喜歡的 Plank themes 下載吧，或者如果你和我一樣視窗外觀用的是 WhiteSur Gtk 的話，再次把檔案解壓縮，資料夾裡有個 plank 資料夾，那個就是WhiteSur預設的 Plank themes 了 (記得先將 plank 資料夾改名後再使用)。</p>
<p>一樣透過命令行把資料夾移動到指定的位置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> Downloads/WhiteSur-Dark-solid/WhiteSur /usr/share/plank/themes/</span><br></pre></td></tr></table></figure>
</li>
<li><p>從終端機開啟 Plank 設置，按你喜歡的進行設定吧。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plank --preferences</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/EKlcR2G.jpg"></p>
</li>
<li><p>於 Tweaks 中將 Plank 設置為開機時啟動。</p>
<p>由於 Plank 是獨立的應用程式，所以需要另外設置在開機時自動啟動。</p>
<p><img src="https://i.imgur.com/UgBRXLB.jpg"></p>
</li>
<li><p>移除 Ubuntu 的 Dock。_<font color=gray>(如果你是用Dash to Dock的話，請跳過這一步)_</font></p>
<p>開啟終端機輸入以下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt remove gnome-shell-extension-ubuntu-dock -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>按 Alt + F2，並輸入 r 來重啟 gnome。</p>
</li>
</ol>
<h3 id="Spotlight：Albert"><a href="#Spotlight：Albert" class="headerlink" title="Spotlight：Albert"></a>Spotlight：Albert</h3><p>Spotlight 是 Mac OS 中一個令我最愛不釋手的功能，而沒想到，這在 Ubuntu 中也是能透過 Albert 這款工具來實現的。</p>
<ol>
<li><p>下載 Albert。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install curl</span><br><span class="line">curl https://build.opensuse.org/projects/home:manuelschneid3r/public_key | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;deb http://download.opensuse.org/repositories/home:/manuelschneid3r/xUbuntu_20.04/ /&#x27;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/home:manuelschneid3r.list</span><br><span class="line">sudo wget -nv https://download.opensuse.org/repositories/home:manuelschneid3r/xUbuntu_20.04/Release.key -O <span class="string">&quot;/etc/apt/trusted.gpg.d/home:manuelschneid3r.asc&quot;</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install albert -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>從終端機開啟並設置 Albert。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albert preferences</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/hb9Z1lq.jpg"></p>
<p><img src="https://i.imgur.com/lUvOn85.jpg"></p>
</li>
<li><p>如果你和我一樣，把 Albert 的快捷鍵設置為 Super(Meta) + Space 的話，可能會發現快捷鍵無效。這時只要到 Tweaks 裡調整設定就行。</p>
<p><img src="https://i.imgur.com/VrlrwxA.jpg"></p>
</li>
</ol>
<h3 id="Workspaces：Workspace-Matrix"><a href="#Workspaces：Workspace-Matrix" class="headerlink" title="Workspaces：Workspace Matrix"></a>Workspaces：Workspace Matrix</h3><p>Ubuntu 的 Workspace 預設是縱向切換的，並且在版本 20.04 以前(含)都沒有適合的類 Mac 橫向 Workspace 外掛 (匪夷所思)。</p>
<p>不過，gnome extenstions 上有個功能強大的外掛 <a href="https://extensions.gnome.org/extension/1485/workspace-matrix/">Workspace Matrix</a>，直接將 Workspace 作為陣列進行管理，算是勉強可以達到類似的效果，習慣以後甚至會覺得它可能還比 Mac 原先的橫向 Workspace 還好用。</p>
<ol>
<li><p>下載 <a href="https://extensions.gnome.org/extension/1485/workspace-matrix/">Workspace Matrix</a> 並於 Tweaks 中進行設置。</p>
<p><img src="https://i.imgur.com/CMmkUez.jpg"></p>
<p><img src="https://i.imgur.com/o7ZXGPI.jpg"></p>
<p><img src="https://i.imgur.com/PDbgAJt.png"></p>
</li>
<li><p>安裝並設定完成後，預設只要按下Super + w，就可以看到它的效果了。</p>
<p><img src="https://i.imgur.com/04CFfiT.jpg"></p>
<p>雖說 Workspace Matrix 在管理 Workspace 上功能強大，但還是有個缺憾：就是在 Overview 中仍不能像 Mac 那樣將 Workspace 橫向顯示於上方，據說這兩個問題在 22.04 中有解了，但鑑於 22.04 是一次大型改版，我還不是很想跳過去就是了。</p>
<blockquote>
<p>開啟 “Show workspace grid in the overview”的效果 (這真的很蠢&#x3D; &#x3D;)</p>
<p><img src="https://i.imgur.com/gQdrJJl.jpg"></p>
</blockquote>
<blockquote>
<p>關閉 “Show workspace grid in the overview”的效果</p>
<p><img src="https://i.imgur.com/6oUxyHp.jpg"></p>
</blockquote>
</li>
</ol>
<h3 id="自動隱藏Top-Bar"><a href="#自動隱藏Top-Bar" class="headerlink" title="自動隱藏Top Bar"></a>自動隱藏Top Bar</h3><p>老舊電腦螢幕小，空間能讓一點是一點，最好還能只在有空缺的時候出現，沒空位的時候會自己讓到。</p>
<ol>
<li><p>到 gnome extension 安裝 <a href="https://extensions.gnome.org/extension/545/hide-top-bar/">Hide Top Bar</a>外掛。</p>
<p><img src="https://i.imgur.com/9D6W3Su.jpg"></p>
</li>
<li><p>開起 Tweaks 進行設置。</p>
<p><img src="https://i.imgur.com/NWtCO3h.jpg"></p>
<p><img src="https://i.imgur.com/pTmMIqL.jpg"></p>
<p><img src="https://i.imgur.com/JhSoySG.jpg"></p>
</li>
</ol>
<h3 id="觸控板手勢：Touchegg-與-Touche"><a href="#觸控板手勢：Touchegg-與-Touche" class="headerlink" title="觸控板手勢：Touchegg 與 Touche"></a>觸控板手勢：Touchegg 與 Touche</h3><p>最後，怎麼能忘記最最最重要的多點觸控手勢呢？雖然無法真的做到像 Mac OS 那樣絲滑順暢，但基本的手勢功能客製還是可以做到的。</p>
<p>Touchegg 是 Ubuntu 儲存庫內置的終端應用程式，它讓我們可以透過編寫設定檔來對多點手勢進行設定，而 Touche 則是 Touchegg的圖形化配置工具，它讓這一切變得更加簡單。</p>
<ol>
<li><p>下載 Touchegg。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:touchegg/stable</span><br><span class="line">sudo apt install touchegg -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>下載 <a href="https://github.com/JoseExposito/touche/releases">Touche</a> 與 <a href="https://extensions.gnome.org/extension/4033/x11-gestures/">X11 Gestures</a> ( Touche 在 Gnome 上用於開啟在 X11 上的多點手勢的套件)，並重新啟動電腦。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install flatpak -y</span><br><span class="line">flatpak install https://dl.flathub.org/repo/appstream/com.github.joseexposito.touche.flatpakref</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/h11RjPW.jpg"></p>
</li>
<li><p>開啟 Touche 進行設置。</p>
<p><img src="https://i.imgur.com/NBO5V0i.jpg"></p>
<p><img src="https://i.imgur.com/tcMdr28.jpg"></p>
</li>
</ol>
<h3 id="當個好雇主，完美的員工福利：RunCat"><a href="#當個好雇主，完美的員工福利：RunCat" class="headerlink" title="當個好雇主，完美的員工福利：RunCat"></a>當個好雇主，完美的員工福利：RunCat</h3><p>恭喜！我們的老朋友終於重獲新生，得以再替我們繼續工作…我是說，再和我們一起奮鬥了。不過，鑒於現在的 AI 如此發達，為了避免它跟據勞基法跑去檢舉我們逼它超時工作、以及強迫不給退休，我們也必須給予它一點合適的員工福利：一隻可愛的貓咪。</p>
<p>Runcat 會根據當前員工的勞苦程度：也就是 CPU 使用率，而跑得越來越快，而當低於設定值時，它就會進入午休模式。</p>
<p><img src="https://i.imgur.com/vcNJKV8.jpg"> <img src="https://i.imgur.com/Zye7aR2.jpg"></p>
<p>很可愛對吧，我自己都想養一隻了，有了如此福利，想必 MacBuuk 一定也願意安穩地再為我們繼續工作了吧。</p>
<ol>
<li><p>安裝 <a href="https://extensions.gnome.org/extension/2986/runcat/">RunCat</a>。</p>
<p><img src="https://i.imgur.com/f21xQfQ.jpg"></p>
</li>
<li><p>開啟 Tweaks 設置。</p>
<p><img src="https://i.imgur.com/e9wjH3l.jpg"></p>
</li>
</ol>
<h2 id="個人快捷建與多點觸控手勢配置"><a href="#個人快捷建與多點觸控手勢配置" class="headerlink" title="個人快捷建與多點觸控手勢配置"></a>個人快捷建與多點觸控手勢配置</h2><p>最後來分享一下我自己習慣的快捷鍵和手勢配置，順便也當作個紀錄，以備不時之需。</p>
<blockquote>
<p><em>註：這裡只列出我有特別去改的部份，沒列出的就是沒有特別動過。</em></p>
</blockquote>
<h3 id="快捷鍵"><a href="#快捷鍵" class="headerlink" title="快捷鍵"></a>快捷鍵</h3><p>快捷鍵的的設定我是直接在 Ubuntu 的 Setting 中處理的。</p>
<p><img src="https://i.imgur.com/cG5G8HS.jpg"></p>
<p>鑒於個人時常在不同裝置間切換，且 MacOS 、 Windows 、 和 Linux 都有，所以就養成了一套有點獵奇的按鍵習慣。</p>
<p>基本功能如複製貼上走的是 Linux 原本的那套，也就是以 Ctrl 為主的組合鍵，而其他桌面控制相關功能，則是混雜了一些在 MacOS 上養成的習慣。</p>
<ul>
<li><p>Launchers</p>
<ul>
<li>Home folder: <strong>Super + F</strong></li>
<li>Launch terminal: <strong>Super + T</strong></li>
<li>Launch web browser: <strong>Super + B</strong></li>
</ul>
</li>
<li><p>Navigation</p>
<ul>
<li>Move to workspace below: <strong>Super + Left</strong></li>
<li>Move to workspace below: <strong>Super + Right</strong></li>
<li>Move window to workspace 1: <strong>Shift + Super + 1</strong></li>
<li>Move window to workspace 2: <strong>Shift + Super + 2</strong></li>
<li>Move window to workspace 3: <strong>Shift + Super + 3</strong></li>
<li>Move window to workspace 4: <strong>Shift + Super + 4</strong></li>
<li>Switch to workspace 1: <strong>Super + 1</strong></li>
<li>Switch to workspace 2: <strong>Super + 2</strong></li>
<li>Switch to workspace 3: <strong>Super + 3</strong></li>
<li>Switch to workspace 4: <strong>Super + 4</strong></li>
</ul>
</li>
<li><p>Screenshots</p>
<ul>
<li>Save a screenshot of a window to Pictures: <strong>Super + Y</strong></li>
<li>Save a screenshot of an area to Pictures: <strong>Ctrl + Super + Y</strong></li>
<li>Save a screenshot to Pictures: <strong>Shift + Super + Y</strong></li>
</ul>
</li>
<li><p>System</p>
<ul>
<li>Show all applications: <strong>LauncbB</strong></li>
<li>Show the overview: <strong>LaunchA</strong></li>
</ul>
</li>
<li><p>Typing</p>
<ul>
<li>Switch to next input source: <strong>Alt + Space</strong></li>
</ul>
</li>
<li><p>Windows</p>
<ul>
<li>Close window: <strong>Super + Q</strong></li>
<li>Maximize window: <strong>Alt + Super + UP</strong></li>
<li>Restore window: <strong>Alt + Super + Down</strong></li>
<li>Toggle fullscreen mode: <strong>F11</strong></li>
<li>View split on left: <strong>Alt + Super + Left</strong></li>
<li>View split on right: <strong>Alt + Super + Right</strong></li>
</ul>
</li>
<li><p>另外，因為我不太喜歡使用 Capslock 鍵，所以我都會將它改設為 Ctrl 鍵，以方便快捷鍵的使用；在 Tweaks 裡還可以對鍵盤的 Layout 進行更細緻的設定，不過我只改了這個部份而已。</p>
<p><img src="https://i.imgur.com/NGlTWTh.png"></p>
</li>
</ul>
<h3 id="多點觸控手勢"><a href="#多點觸控手勢" class="headerlink" title="多點觸控手勢"></a>多點觸控手勢</h3><p>Touchegg 一個強大的功能是可以針對不同的應用程式設置不同的手勢，不過我不太喜歡太複雜的操作，所以只對全域的手勢進行了設定。</p>
<ul>
<li><p>三指滑動</p>
<ul>
<li>上滑：Overview</li>
<li>下滑：Workspaces 總覽</li>
<li>左&#x2F;右 滑：切換 Workspace</li>
</ul>
<blockquote>
<p><img src="https://i.imgur.com/hRHM5si.png"></p>
</blockquote>
<blockquote>
<p><img src="https://i.imgur.com/veBp0Ge.png"></p>
</blockquote>
</li>
<li><p>二指縮放：Zooming</p>
<blockquote>
<p><img src="https://i.imgur.com/ZmGv6s4.png"></p>
</blockquote>
</li>
<li><p>三指縮放：視窗大小 還原&#x2F;最大化</p>
<blockquote>
<p><img src="https://i.imgur.com/jczD5Ht.png"></p>
</blockquote>
</li>
<li><p>多指點擊。</p>
<ul>
<li>兩指：滑鼠右鍵</li>
<li>三指：滑鼠中鍵（滾輪鍵）</li>
</ul>
<blockquote>
<p><img src="https://i.imgur.com/aTwt8Dw.png"></p>
</blockquote>
</li>
</ul>
<h2 id="其它設定"><a href="#其它設定" class="headerlink" title="其它設定"></a>其它設定</h2><h3 id="終端機隱藏用戶名與顯示-git-branch"><a href="#終端機隱藏用戶名與顯示-git-branch" class="headerlink" title="終端機隱藏用戶名與顯示 git branch"></a>終端機隱藏用戶名與顯示 git branch</h3><p>開啟 bashrc。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc 60+</span><br></pre></td></tr></table></figure>

<p>加入以下程式碼。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git branch info if present</span></span><br><span class="line"><span class="function"><span class="title">parse_git_branch</span></span>()&#123;</span><br><span class="line">    BRANCH=<span class="string">&quot;`git branch 2&gt;/dev/null | grep &quot;</span>^\*<span class="string">&quot; | sed -e &quot;</span>s/^\*\ //<span class="string">&quot;`&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [[ ! <span class="string">&quot;<span class="variable">$&#123;BRANCH&#125;</span>&quot;</span> == <span class="string">&quot;&quot;</span> ]]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot; <span class="variable">$&#123;BRANCH&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改以下程式片段。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$color_prompt</span>&quot;</span> = <span class="built_in">yes</span> ]; <span class="keyword">then</span></span><br><span class="line">        PS1=<span class="string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;32m\] \w\[\033[00m\] \[\033[33m\]$(parse_git_branch)\[\033[00m\]\$ &#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        PS1=<span class="string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;1mplication:\w $(parse_git_branch)\$ &#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> color_prompt force_color_prompt</span><br></pre></td></tr></table></figure>

<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>在這一系列的研究和改造之後，我很感動。</p>
<p>一是我可以和老朋友再續情緣，我也不曉得為什麼我會對它如此執著，如果可以，我甚至希望一輩子都只用這台筆電。</p>
<p>二是我可以成為忠貞不渝、誠實守信的好果粉，我沒有騙人，我說可以用十年就是可以用十年。</p>
<p>三是我發覺自己竟然還有興趣和心力，花費大把時間去做這麼一件蠢事，甚至還像這樣鉅細靡遺地把過程紀錄下來，實在難能可貴。</p>
<p>大概就是醬吧。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://neostation.net/imac-41-reinstall-ubuntu/">老 iMac 4,1 重生改裝 Ubuntu</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10191497">[Day 03] 深度學習環境安裝筆記 — Ubuntu 系統安裝與設定 02.安裝作業系統</a></li>
<li><a href="https://medium.com/@scofield44165/ubuntu-20-04%E4%B8%AD%E6%96%B0%E5%A2%9E%E6%96%B0%E9%85%B7%E9%9F%B3%E8%BC%B8%E5%85%A5%E6%B3%95-add-chinese-chewing-in-ubuntu-20-04-5ce78563638b">Ubuntu 20.04中新增新酷音輸入法 ｜Add Chinese (Chewing) in Ubuntu 20.04</a></li>
<li><a href="https://youtu.be/SkVVFFwy-H4">How To Make Ubuntu Look Like macOS Big Sur [2021]</a></li>
<li><a href="https://linuxhint.com/make_ubuntu_look_like_mac_os/">How to make Ubuntu 20.04 look like Mac OS</a></li>
<li><a href="https://itsfoss.com/make-ubuntu-look-like-macos/">How to Make Ubuntu Look Like macOS in 5 Easy Steps</a></li>
<li><a href="https://ubunlog.com/en/change-ubuntu-system-sounds/">How to change system sounds in Ubuntu</a></li>
<li><a href="https://ubuntuhandbook.org/index.php/2021/06/multi-touch-gestures-ubuntu-20-04/">How to Enable &#x2F; Configure Multi-Touch Gestures in Ubuntu 20.04</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>安裝 Neovim 與 Nerd Fonts</title>
    <url>/2024/02/17/neovim-setup-20240217-installing-neovim-and-nerdfont/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本章將分成三個部分：</p>
<ol>
<li><p>在 Windows 10 環境下使用 WSL2 安裝 Ubuntu 22.04。</p>
</li>
<li><p>安裝 Neovim。</p>
</li>
<li><p>安裝 NerdFont。</p>
</li>
</ol>
<p>如果你一開始就在 Ubuntu 環境下的話，也可以直接跳到安裝 Neovim 的部分，兩者的安裝方法相同。</p>
<hr>
<h2 id="在Windows-10-中啟用-WSL2-並安裝-Ubuntu-22-04"><a href="#在Windows-10-中啟用-WSL2-並安裝-Ubuntu-22-04" class="headerlink" title="在Windows 10 中啟用 WSL2 並安裝 Ubuntu 22.04"></a>在Windows 10 中啟用 WSL2 並安裝 Ubuntu 22.04</h2><h3 id="什麼是-WSL？"><a href="#什麼是-WSL？" class="headerlink" title="什麼是 WSL？"></a>什麼是 WSL？</h3><p>Windows Subsystem for Linux（簡稱 WSL）是 Windows 的一項功能，它可以讓你在不需要額外建置雙系統或使用虛擬機的情況下，在 Windows 電腦上執行 Linux 環境，從而使用最小的成本來逃離 Windows 愚蠢至極的開發環境，你可以在 WSL 中執行大部分常見的 Linux 發行板，包含 Ubuntu、Debian、Fedora、甚至 Arch Linux 等等。</p>
<p>WSL 另一個相當吸引我的好處是，它能夠實現跨系統的檔案操作，這意味著我可以直接從 WSL 中操作 Windows 的檔案，反之亦然，這對於我這種想一邊使用 Windows 打遊戲，同時又極度依賴於 Linux 環境來進行開發的人來說，簡直是福音。</p>
<p>另外，WSL 又分成 WSL1 和 WSL2 兩個版本，兩者如果單純只是用來運行 Neovim 的話，在使用上的區別並不大。選擇的分歧將在於你的專案環境實際是在哪裏運行，如果你的專案環境是在 Windows 中，那麼 WSL1 就足夠了，而如果你的專案依賴於 Linux Kernel，那麼 WSL2 就是你的選擇。</p>
<p>而本章記錄的則是 WSL2 的安裝與使用。</p>
<h3 id="啟用-WSL2"><a href="#啟用-WSL2" class="headerlink" title="啟用 WSL2"></a>啟用 WSL2</h3><ol>
<li>到「控制臺 &gt; 程式集 &gt; 程式與功能」中點擊「開啟或關閉 Windows 功能」。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgonvim_install_1.png"><br><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgonvim_install_2.png"><br><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgonvim_install_3.png"></p>
<ol start="2">
<li>勾選「Windows 子系統 Linux 版」和「虛擬機器平台」，點擊確定，並重新啟動電腦。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgonvim_install_4.png"></p>
<ol start="3">
<li>使用 Microsoft Store 安裝 Linux 發行版。</li>
</ol>
<p>重啟成功後，你就可以到 Microsoft Store 中安裝你喜歡的 Linux 發行版了。我這裡選擇的是 Ubuntu 22.04。</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgonvim_install_5.png"><br><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgonvim_install_6.png"><br><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgonvim_install_7.png"></p>
<p>安裝完成後，開起 Ubuntu 22.04，它會花一點時間進行安裝，並要求你設定使用者的名稱和密碼，都完成後，你就可以使用它了，使用起來的感覺就和一般的終端機差不多，但裡頭已經是個徹底的 Linux 系統（歡迎回家）。</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgonvim_install_8.png"></p>
<hr>
<h2 id="在-Ubuntu-22-04-中安裝-Neovim"><a href="#在-Ubuntu-22-04-中安裝-Neovim" class="headerlink" title="在 Ubuntu 22.04 中安裝 Neovim"></a>在 Ubuntu 22.04 中安裝 Neovim</h2><p>接下來，我們就可以開始安裝 Neovim 了。在 Ubuntu 22.04 中， 我們可以直接透過 <code>snap</code> 來下載最新釋出的穩定版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo snap install nvim --classic</span><br></pre></td></tr></table></figure>

<p>安裝完成後，即可輸入<code>nvim</code>來起動 Neovim，另外，也可以輸入以下指令來確認版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvim -v</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgonvim_install_9.png"></p>
<hr>
<h2 id="安裝-Nerd-Fonts"><a href="#安裝-Nerd-Fonts" class="headerlink" title="安裝 Nerd Fonts"></a>安裝 Nerd Fonts</h2><p>Nerd Fonts 簡單來說，就是集成了大部份常見符號的字體庫，由於在之後的設定中會使用到不少符號，所以這裡建議先下載起來，否則到時很可能會出現某些特殊符號無法顯示的問題。</p>
<p>首先，到 Nerd Fonts 官網上找一套喜歡的字體吧！你可以在<a href="https://www.programmingfonts.org/">這裡</a>直接瀏覽各個字體的樣子。</p>
<p>比較熱門的幾個應該是 Hack、FiraCode、SourceCode Pro、和 Mosle 等等，而我個人常用的則是 Hack 與 FiraCode。</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgonvim_install_10.png"></p>
<h3 id="於-Windows-10-中安裝字體"><a href="#於-Windows-10-中安裝字體" class="headerlink" title="於 Windows 10 中安裝字體"></a>於 Windows 10 中安裝字體</h3><ol>
<li>下載並安裝字體。</li>
</ol>
<p>看好字體後，到<a href="https://www.nerdfonts.com/font-downloads">這裡</a>找到你看上的那個字體，下載並解壓縮。</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgonvim_install_11.png"></p>
<p>進入解壓縮後的資料夾，找到副檔名為<code>.ttf</code>的字體檔，右鍵安裝。我的建議是使用帶 Mono 標註的等寬字體會比較好看。另外，你也可以一次把所有要安裝的字體選取起來，然後右鍵一次安裝。</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgonvim_install_12.png"></p>
<ol start="2">
<li>設定終端機字體。</li>
</ol>
<p>在進行設定前，我們可以先到 Nerd Fonts 的 <a href="https://www.nerdfonts.com/cheat-sheet">Cheat Sheet</a> 中隨便找一個 icon 複製貼上到終端機中，此時由於終端機的字體還是預設字體，所以它應該會無法顯示或顯示成亂碼。</p>
<p>為了讓 icon 正確顯示，我們需要去設定字體：</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgonvim_install_13.png"></p>
<p>設定完成後，icon 應該就可以正常顯示了。另外，我建議可以順便翻一下這個設定頁面，調整一下字體大小和其他額外的設定。</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgonvim_install_14.jpg"></p>
<h3 id="於-Ubuntu-中安裝字體"><a href="#於-Ubuntu-中安裝字體" class="headerlink" title="於 Ubuntu 中安裝字體"></a>於 Ubuntu 中安裝字體</h3><p>在 Ubuntu 中，我們可以使用 getNF 這個第三方的下載器來在終端機中安裝想要的 Nerd Fonts 字體。</p>
<ol>
<li>下載依賴程式。</li>
</ol>
<p>在使用 getNF 前，我們需要先下載一些依賴程式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git fzf curl</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>下載 getNF。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ronniedroid/getnf.git</span><br><span class="line"><span class="built_in">cd</span> getnf</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>下載字體。</li>
</ol>
<p>看好字體後，執行 getNF，並選擇下載你要的字體。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/getnf</span><br><span class="line">./getnf</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgonvim_install_17.png"></p>
<ol start="4">
<li>設定終端機字體 - gnome-terminal。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgonvim_install_18.jpg"></p>
<hr>
<h2 id="WSL-的其他設置"><a href="#WSL-的其他設置" class="headerlink" title="WSL 的其他設置"></a>WSL 的其他設置</h2><h3 id="關閉-Windows-提示音"><a href="#關閉-Windows-提示音" class="headerlink" title="關閉 Windows 提示音"></a>關閉 Windows 提示音</h3><ol>
<li>「控制臺 &gt; 硬體和音效 &gt; 聲音（變更系統音效）」。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgonvim_install_15.png"></p>
<ol start="2">
<li>將「預設嗶聲」設置為（無）。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgonvim_install_16.png"></p>
<hr>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>至此，我們就有個乾淨的 Neovim 環境可以執行了，而在下一章裡，在我們開始進行設置和外掛安裝前，我想先來聊聊如何使用 Neovim 內建的 help page 以及健檢指令 <code>:checkhealth</code>。</p>
<p>這些工具可以讓我們快速診斷 Neovim 和外掛的運行環境狀況，並直接在 Neovim 中查找處理問題的方法，而不用特地開啓瀏覽器，在網路上如無頭蒼蠅般地盲目尋找答案。</p>
<p><big>下一篇： <a href="/2024/02/18/neovim-setup-20240218-help-checkhealth-and-provider/" title="救救我啊我救我 —— help 與 checkhealth">救救我啊我救我 —— help 與 checkhealth</a></big></p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://medium.com/hungys-blog/windows-subsystem-for-linux-configuration-caf2f47d0dfb">Windows Subsystem for Linux 環境配置 (最新 1709 版)</a></li>
<li><a href="https://learn.microsoft.com/zh-tw/windows/wsl/install-manual">舊版 WSL 的首度安裝步驟</a></li>
<li><a href="https://www.nerdfonts.com/">Nerd Fonts</a></li>
</ul>
]]></content>
      <categories>
        <category>Neovim</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>Neovim</tag>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>救救我啊我救我 —— help 與 checkhealth</title>
    <url>/2024/02/18/neovim-setup-20240218-help-checkhealth-and-provider/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Vim 的坑不少，例如每個工程師都必然會遇到的千古難題：如何退出 Vim？</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202402181547237.jpg"></p>
<p>然而實際上，不論是 Neovim 還是 Vim，在你第一次打開它的時候，它就曾試圖告訴你不少有用的資訊了（包含如何退出），只是你可能沒有注意到。</p>
<p>為了讓將來在使用 Neovim 時能有基本的自救能力，當遇到問題時也不用急著上 Google，而是能直接透過 Neovim 內部的文件來快速診斷和處理問題，本章將介紹如何使用 Neovim 的內建指令 <code>help</code> 與 <code>checkhealth</code>。另外，這些內容將不僅限於 Neovim 本體，同時也適用於插件的 help page。</p>
<hr>
<h2 id="help-txt"><a href="#help-txt" class="headerlink" title="help.txt"></a>help.txt</h2><h3 id="第一次求救"><a href="#第一次求救" class="headerlink" title="第一次求救"></a>第一次求救</h3><p>第一次使用<code>nvim</code>指令開啓 Neovim 時，你會看到類似於這樣的畫面：</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202402181514879.png"></p>
<p>你會發現，其實它已經告訴你可以如何向它尋求幫助 —— 輸入<code>:help</code>或<code>:h</code>，然後按下<code>&lt;Enter&gt;</code>，就可以打開 Neovim 的 main help page，而這裡便記錄了你可以怎麽使用這些幫助文件。</p>
<p>另外，這裡也說明了你可以如何退出 help page 和 Neovim —— 輸入<code>:q&lt;Enter&gt;</code>關閉 help page，以及輸入<code>:qa!&lt;Enter&gt;</code>來 <big><strong>不</strong></big> 儲存直接退出 Neovim。</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202402201758541.png"></p>
<h3 id="Links-and-Tags"><a href="#Links-and-Tags" class="headerlink" title="Links and Tags"></a>Links and Tags</h3><p>在 help page 中，你會看見一些粗體標亮的關鍵字，或是往下翻找，你可以看見 Neovim 幫助文件的完整目錄，這代表這些關鍵字有它們相對應的說明文件，同時，它們也是文件的連結入口，你可以將你的遊標移動到這些單字上，然後使用以下快捷鍵來進行文件的跳轉：</p>
<table>
<thead>
<tr>
<th>Mappings</th>
<th>Action</th>
</tr>
</thead>
<tbody><tr>
<td><code>Ctrl + ]</code></td>
<td>移動至連結</td>
</tr>
<tr>
<td><code>Ctrl + T</code></td>
<td>返回上一個文件</td>
</tr>
</tbody></table>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202402211419512.png"></p>
<p>這就延伸出了 help page 的第一個用法，開啓 help page 後，我們可以使用和在 Normal Mode 下一樣的操作方式，使用<code>/</code>來進行關鍵字搜尋，例如我們可以輸入<code>/quick</code>搜尋目錄<code>quickref</code>，將遊標移動到關鍵字上後，再使用快捷鍵<code>Ctrl + ]</code> 進行跳轉。</p>
<p>令外，還有兩個我在瀏覽大型文件時很常使用的快捷鍵，也在這裡分享給各位：</p>
<table>
<thead>
<tr>
<th>Mappings</th>
<th>Action</th>
</tr>
</thead>
<tbody><tr>
<td><code>Ctrl + o</code></td>
<td>返回至上一個遊標位置</td>
</tr>
<tr>
<td><code>Ctrl + i</code></td>
<td>返回至下一個遊標位置</td>
</tr>
</tbody></table>
<h3 id="搜尋模式"><a href="#搜尋模式" class="headerlink" title="搜尋模式"></a>搜尋模式</h3><p>如果每次都要先開啓 main help page 再進行搜尋，那還真的是不如直接 Google 比較快，更何況 <code>:help</code> 頁面中只有目錄，而沒有更完整的內容可以進行關鍵字搜尋。</p>
<p>所幸，我們可以直接在 command line 中輸入指令時就開始進行搜尋了，例如，如果我想搜尋關鍵字<code>word</code>，我只要輸入<code>:h word</code>就可以開始搜尋。同時，我們也可以使用以下的三個快捷鍵，來進行關鍵字的搜尋和補齊：</p>
<table>
<thead>
<tr>
<th>Mappings</th>
<th>Action</th>
</tr>
</thead>
<tbody><tr>
<td><code>Ctrl + d</code></td>
<td>顯示所有包含關鍵字的主題</td>
</tr>
<tr>
<td><code>&lt;Tab&gt;</code></td>
<td>選取下一個包含關鍵字的主題</td>
</tr>
<tr>
<td><code>&lt;Shift&gt; + &lt;Tab&gt;</code></td>
<td>選取上一個包含關鍵字的主題</td>
</tr>
</tbody></table>
<p><code>Ctrl + d</code>範例<br><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202402201925855.png"></p>
<p><code>&lt;Tab&gt;</code>範例<br><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202402201926090.png"></p>
<p>另外，Neovim 也給了部分固定主題提供了固定的關鍵字格式，這些格式也有被列在<code>:h</code>中，如果忘記了，也可以隨時查看：</p>
<table>
<thead>
<tr>
<th>主題</th>
<th>關鍵字前綴</th>
<th>範例</th>
</tr>
</thead>
<tbody><tr>
<td>Normal mode command</td>
<td></td>
<td><code>:help x         </code></td>
</tr>
<tr>
<td>Visual mode command</td>
<td><code>v\_</code></td>
<td><code>:help v_u       </code></td>
</tr>
<tr>
<td>Insert mode command</td>
<td><code>i\_</code></td>
<td><code>:help i\_&lt;Esc&gt;  </code></td>
</tr>
<tr>
<td>Command-line command</td>
<td><code>:</code></td>
<td><code>:help :quit     </code></td>
</tr>
<tr>
<td>Command-line editing</td>
<td><code>c\_</code></td>
<td><code>:help c\_&lt;Del&gt;  </code></td>
</tr>
<tr>
<td>Vim command argument</td>
<td><code>-</code></td>
<td><code>:help -r        </code></td>
</tr>
<tr>
<td>Option</td>
<td><code>&#39;</code></td>
<td><code>:help &#39;wildmenu&#39;</code></td>
</tr>
<tr>
<td>Regular expression</td>
<td><code>/</code></td>
<td><code>:help /[]       </code></td>
</tr>
</tbody></table>
<p>例如，如果我想知道退出 Neovim 的指令<code>:q</code>的所有用法，我只要輸入<code>:h :q</code>就可以開始搜尋了、或是，如果我想知道快捷鍵<code>Ctrl-r</code>的功能是什麼，我只要輸入<code>:h CTRL-r</code>就可以開始搜尋，或更進階一點，你可輸入<code>:h ctrl-r</code>然後按下<code>Ctrl-d</code>或是<code>&lt;Tab&gt;</code>，來查找與這個快捷鍵有關的主題選項。</p>
<p>以上，就是關於 help page 的一些基本用法了，這也是我常用來處理 Neovim 問題的第一步，如果還想了解一些更進階的技巧，可以查閱<code>:h :help</code>，或是參考 <a href="https://vim.fandom.com/wiki/Learn_to_use_help">Vim Tips Wiki: Learn to use help</a>。</p>
<hr>
<h2 id="checkhealth"><a href="#checkhealth" class="headerlink" title="checkhealth"></a>checkhealth</h2><p>Neovim 的外掛包含 Neovim 本身的功能有時會依賴於額外的程式環境、或是其他的某些外掛，例如系統剪貼簿的取用、以及使用 Python3 等其他語言所撰寫的功能等等。如果你安裝了某些外掛，卻發現它不起作用的時候，通常可能就是因爲沒有下載這些額外的東西。</p>
<p>除了從這些外掛的 help page、git 或官網上查找依賴之外，Neovim 的<code>:checkhealth</code>指令可以讓我們很方便的去查看應該、以及甚至要怎麽處理這些問題。</p>
<p>開啟 Neovim 後，輸入<code>:checkhealth</code>，你會看到類似於這樣的畫面：<br><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202402211337068.png"></p>
<p>另外，checkhealth 也可以接受參數來只對指定內容進行檢查，例如<code>:checkhealth provider</code>，這樣就可以只查看 provider 的健康狀況了。<br><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202402211342476.png"></p>
<p>加上在上一段裡提到的<code>:h</code>，於是乎，我們的 Neovim 快篩自救程序就這樣完成了：每當 Neovim 和其外掛出現問題時，我們可以先使用<code>:checkhealth</code>做一遍基本檢查，來看系統中是否缺漏了什麼，然後再使用<code>:h</code>來查找可能的解決方案，而這一切幾乎都可以在 Neovim 中不使用網路來完成，且相當快速有效。</p>
<hr>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>至此，我們已經學會了如何使用 help page 和<code>:checkhealth</code>來進行診斷與解決問題，而在下一章裡，我們將正式進入 Neovim 的基礎設定環節。</p>
<p>首先，我會介紹 Neovim 的設定文件結構，接著，我會提供我的設定文件，並重點介紹一些常見，且我覺得很是有用的選項，例如設定剪貼簿、行號、以及縮排等功能。</p>
<p><big>上一篇： <a href="/2024/02/17/neovim-setup-20240217-installing-neovim-and-nerdfont/" title="安裝 Neovim 與 Nerd Fonts">安裝 Neovim 與 Nerd Fonts</a></big><br><big>下一篇： <a href="/2024/03/06/neovim-setup-20240306-nvim-basic-config/" title="Neovim 設定文件結構與基礎功能設定">Neovim 設定文件結構與基礎功能設定</a></big></p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://vim.fandom.com/wiki/Learn_to_use_help">Vim Tips Wiki: Learn to use help</a></li>
<li><a href="https://youtu.be/87AXw9Quy9U?si=smiJPQVs8mFlnQJK">Understanding Neovim #1 - Installation</a></li>
</ul>
]]></content>
      <categories>
        <category>Neovim</category>
      </categories>
      <tags>
        <tag>Neovim</tag>
      </tags>
  </entry>
  <entry>
    <title>Neovim 設定文件結構與基礎功能設定</title>
    <url>/2024/03/06/neovim-setup-20240306-nvim-basic-config/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Neovim 同時支援使用 VimScript 和 Lua 語言來撰寫設定文件，前者源自於它的老祖 Vim，而後者則是一種極爲輕量的 Scripting language，同時亦是 Neovim 有別於 Vim 最大的特點之一：它更加易學、具有更好的工具支持與易擴展性、以及更高的執行效能，這都是你應該選擇使用 Lua 而非 VimScript 原因，唯一導致你必須使用 VimScript 的理由大概只有，當你想與 Vim 共用你的這份設定文件的時候。</p>
<p>有鑑於我已經不太使用 Vim 了，且我也更加喜歡 Lua 的設定模式，故本系列文都將使用 Lua 來撰寫設定文件，如果你是從 Vim 轉過來的 VimScript 使用者，放心，Lua 比 VimScript 簡單多了，順着設定文件讀下去，想必就能學會個七、八成了吧。</p>
<p>在本章裡，我將介紹 Neovim 的設定文件結構，分享與說明我的基礎功能設定，以及安裝部分依賴程式以啟用特定功能，如果想直接看我的設定和設定項說明，也可以直接跳到 <big><strong>基礎設定說明</strong></big> 一段閱讀。</p>
<p>而如果想直接複製我的設定文件，可以到<a href="https://github.com/Imp1ication/impvim/blob/master/lua/imp/options.lua">這裡（我的 github）</a>來複製完整版的內容。</p>
<hr>
<h2 id="建立設定文件與引用"><a href="#建立設定文件與引用" class="headerlink" title="建立設定文件與引用"></a>建立設定文件與引用</h2><h3 id="設定文件在哪裡？"><a href="#設定文件在哪裡？" class="headerlink" title="設定文件在哪裡？"></a>設定文件在哪裡？</h3><p>遇事不決，先問 help page，讓我們輸入<code>:h config</code>，來看看有沒有什麼有用的資訊：</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202403051613256.png"></p>
<p>有了，在 Unix 環境下，Config file 的位置應該在 <code>~/.config/nvim/init.lua</code>，而這也就是 Neovim 每次在起動時，讀取設定文件的入口處。</p>
<blockquote>
<p>註：如果你在電腦中找不到文件，甚至相關的資料夾，請直接創建一個就可以了。</p>
</blockquote>
<p>接著，讓我們來試寫第一段 Lua 程式，看看 Neovim 會不會正常運行它吧，編輯 <code>init.lua</code>：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;World!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>重新啓動 Neovim，你應該就可以看到文字訊息被打印出來了。</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202403051652215.png"></p>
<p>另外，如果你因爲輸入了什麼而錯過任何系統訊息，想重看完整內容的話，可以在開啟 Neovim 後，輸入<code>:message</code>來查看所有的歷史訊息，或是輸入<code>:&#123;count&#125; mes</code> 來查看最近的 {count} 筆訊息，例如<code>:1 mes</code>。</p>
<h3 id="建立文件結構"><a href="#建立文件結構" class="headerlink" title="建立文件結構"></a>建立文件結構</h3><p>以下將是我們接下來會採用的文件結構：</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202403051751496.png"></p>
<ul>
<li><p><code>init.lua</code>：作為設定文件的入口，負責引用其他的設定文件。</p>
</li>
<li><p><code>lua/</code>：當我們在 Lua 中引用其他文件時，Lua 會優先引用<code>./lua/?.lua</code>中的文件，如果不存在，才會去使用<code>./?.lua</code>中的文件。</p>
<blockquote>
<p>例如：當我們在<code>init.lua</code>中引用 <code>test.lua</code>時，Lua 會優先使用 <code>./lua/test.lua</code>，如果不存在，才會去使用<code>./test.lua</code>。</p>
</blockquote>
<blockquote>
<p>我的建議是，為了避免將來管理混亂，還是乖乖地把所有設定檔放在<code>lua/</code>裡頭會比較好。</p>
</blockquote>
</li>
<li><p><code>imp/</code>：這層資料夾將作為命名空間，用意是避免當 Lua 在引用其他外掛的設定時，出現意外的文件名稱衝突，你可以將這個資料夾以任何你喜歡的方式命名，例如：<code>user/</code>、<code>launch/</code>、或是和我一樣以 id 的前三碼命名。</p>
</li>
<li><p><code>options.lua</code>：這將會是我們的第一個設定文件，用來對 Neovim 的基礎功能進行設定，詳細內容將在後續介紹。</p>
</li>
</ul>
<h3 id="引用設定文件"><a href="#引用設定文件" class="headerlink" title="引用設定文件"></a>引用設定文件</h3><p>最後，讓我們來引用我們的第一個設定文件吧，編輯<code>init.lua</code>：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;imp/options&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>require(&quot;&#123;filename&#125;&quot;)</code>：此函式將會引用<code>./lua/&#123;filename&#125;.lua</code>。</li>
</ul>
<p>接著做為測試，讓我們編輯<code>options.lua</code>：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hi, I&#x27;m options&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>重啓 Neovim，此時我們就可以看到<code>option.lua</code>的內容被成功引用了：</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202403051829196.png"></p>
<hr>
<h2 id="基礎設定說明"><a href="#基礎設定說明" class="headerlink" title="基礎設定說明"></a>基礎設定說明</h2><h3 id="Lua-API"><a href="#Lua-API" class="headerlink" title="Lua API"></a>Lua API</h3><p>Neovim 提供了一套完整的 Lua library，其所提供的 API 讓我們的設定文件可以輕鬆使用 Lua 語言來與 Neovim 進行交互。這些 API 大多都以<code>vim.</code>做爲前綴，例如：</p>
<table>
<thead>
<tr>
<th align="left">API</th>
<th align="left">用途</th>
<th align="left">例子</th>
<th align="left">對應的 VimScript</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>vim.opt</code></td>
<td align="left">用於設置和訪問全局選項</td>
<td align="left"><code>vim.opt.number = true</code></td>
<td align="left"><code>set number</code></td>
</tr>
<tr>
<td align="left"><code>vim.g</code></td>
<td align="left">用於設置和訪問全局變量</td>
<td align="left"><code>vim.g.my_var = &#39;hello&#39;</code></td>
<td align="left"><code>let g:my_var = &#39;hello&#39;</code></td>
</tr>
<tr>
<td align="left"><code>vim.cmd</code></td>
<td align="left">用於執行 Vim 命令（Ex 命令）</td>
<td align="left"><code>vim.cmd(&quot;new&quot;)</code></td>
<td align="left"><code>:new</code></td>
</tr>
</tbody></table>
<p>所以，我們可以如此編輯 <code>options.lua</code>：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">vim.opt.number = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>儲存後重新起動 Neovim，你就會發現左側的行號被開啓了。Neovim就是透過這樣的方式，在每次啟動時引用設定文件，並根據其中的設定來變更編輯器的行為。</p>
<h3 id="設定選項的魔法-——-options"><a href="#設定選項的魔法-——-options" class="headerlink" title="設定選項的魔法 —— :options"></a>設定選項的魔法 —— <code>:options</code></h3><p>如果每次測試設定選項都必須要一項一項的查找，並反覆開關 Neovim 來測試效果的話，那也太麻煩了，所幸，Neovim 提供了即時改變選項的魔法<code>:options</code>：</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202403060122072.png"></p>
<p>這裡提供了所有設定的分類目錄，以及各選項的簡述與選項內容，我們同樣可以使用<code>/</code>進行關鍵字搜尋，或將遊標移動到有興趣的目錄上，並按下<code>&lt;Enter&gt;</code>來查看目錄內容。</p>
<p>接著，我們可以將遊標移動到設定的選項上，然後按下<code>&lt;Enter&gt;</code>，或甚至直接修改字串內容，就可以發現選項被套用了。</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202403060130243.png"></p>
<p>這個設定不會被記錄，所以你可以隨意嘗試各種不同的設定，再將你喜歡的一條條記錄到設定檔中，我相當推薦各位有空的時候可以來這裡摸索一下，有時或許會發現一些神奇又實用的功能。</p>
<h3 id="options-lua-完整說明"><a href="#options-lua-完整說明" class="headerlink" title="options.lua 完整說明"></a><code>options.lua</code> 完整說明</h3><p>以下我將對我的設定項目進行分類介紹，完整的設定檔可以到<a href="https://github.com/Imp1ication/impvim/blob/master/lua/imp/options.lua">這裡（我的 github）</a>查看，你可以直接複製再根據需求進行微調；而由於項目有點多，且有部分我已經標上註解了，所以我這裡只會對一些我認為比較重要的，以及比較容易有疑慮的選項進行說明。</p>
<h4 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- basic --</span></span><br><span class="line">vim.opt.fileencoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">vim.opt.termguicolors = <span class="literal">true</span></span><br><span class="line">vim.opt.clipboard = <span class="string">&quot;unnamedplus&quot;</span> <span class="comment">-- allows nvim to access the OS clipboard</span></span><br><span class="line">vim.opt.mouse = <span class="string">&quot;a&quot;</span> <span class="comment">-- enabled mouse, &quot;a&quot; for all modes, and &quot;niv&quot; for normal, insert, visual mode</span></span><br><span class="line">vim.opt.timeoutlen = <span class="number">500</span> <span class="comment">-- Time in milliseconds to wait for a mapped sequence to complete</span></span><br><span class="line">vim.opt.virtualedit = <span class="string">&quot;block&quot;</span></span><br><span class="line">vim.opt.iskeyword:append(<span class="string">&quot;-&quot;</span>) <span class="comment">-- consider string-string as whole word</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>clipboard</code>：<br>剪貼簿應該是每個剛入坑 Neovim 的人都會遇到的問題之一，你會發現你在 Neovim 外複製的東西無法直接使用指令<code>p</code>來貼上，同樣地，我們在 Neovim 中使用<code>y</code>複製的東西，也無法貼到 Neovim 外的其他地方，這是因爲 Neovim 預設的剪貼簿和系統是不同的，所以我們需要對其進行設定。<br>另外，我們還需要在系統中額外安裝剪貼簿工具，才能讓它正常作用，我這裡使用的是 Xclip：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install xclip</span><br></pre></td></tr></table></figure>
安裝完成後，複製貼上的功能應該就可以正常使用了。</li>
<li><code>virtualedit</code>：<br>在預設情況，當我們使用 V-Block 模式時，我們是無法將遊標移動到行尾之後的部分的，即便圈選的其他行在這之後仍有內容：<br><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202403052341736.png"><br>而當我們將其設為<code>block</code>之後，Neovim 就可以將這樣的行尾視為空白一起圈選起來了。<br><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202403052341135.png"><br>另外，它還提供了其他模式，不過我沒有使用過，所以這裡就不做贅述了。</li>
<li><code>iskeyword:append(&quot;-&quot;)</code>：<br>當我們使用<code>w</code>等指令進行單字間的跳躍時，Neovim 會把一些被特殊符號（例如：’-‘）所隔開的字視為兩個獨立的單字，我們可以透過這條設定，來將被這些符號分割的文字視為一個完整的單字。</li>
</ul>
<h4 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- backup --</span></span><br><span class="line">vim.opt.swapfile = <span class="literal">false</span></span><br><span class="line">vim.opt.undofile = <span class="literal">true</span> <span class="comment">-- enable persistent undo</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>swapfile</code>：<br>當不正常關閉 Neovim 時，它會爲當下正在開啓的檔案建立備份，並在下一次開啓時詢問要不要復原備份，由於我有動不動就存檔的習慣，以及它有時不知道爲什麼會到處出現，讓我覺得很煩，所以我習慣將它關閉。</li>
<li><code>undofile</code>：<br>如果你希望可以在關閉文件後，在下一次開啓時還可以保留上次的操作記錄，來讓你使用指令<code>u</code>和<code>C-r</code>來還原上&#x2F;下一步，那麼你可以選擇將這個選項開啓。</li>
</ul>
<h4 id="line-number-and-line-column"><a href="#line-number-and-line-column" class="headerlink" title="line number and line column"></a>line number and line column</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- line number and line column --</span></span><br><span class="line">vim.opt.number = <span class="literal">true</span></span><br><span class="line">vim.opt.relativenumber = <span class="literal">true</span></span><br><span class="line">vim.opt.numberwidth = <span class="number">2</span></span><br><span class="line">vim.opt.signcolumn = <span class="string">&quot;yes&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>relativenumber</code>：<br>相對行號在進行跳轉和多行操作時很有用，我相當推薦將它開啓。而下圖則是官方提供的<code>number(nu)</code>和<code>relativenumber(rnu)</code>開關時的顯示對照圖：<br><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202403061821655.png"></li>
</ul>
<h4 id="tab-and-indentation"><a href="#tab-and-indentation" class="headerlink" title="tab and indentation"></a>tab and indentation</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- tab and indentation --</span></span><br><span class="line">vim.opt.tabstop = <span class="number">4</span></span><br><span class="line">vim.opt.softtabstop = <span class="number">4</span></span><br><span class="line">vim.opt.shiftwidth = <span class="number">4</span></span><br><span class="line">vim.opt.smarttab = <span class="literal">false</span></span><br><span class="line">vim.opt.expandtab = <span class="literal">true</span> <span class="comment">-- expand tab to spaces</span></span><br><span class="line">vim.opt.autoindent = <span class="literal">true</span> <span class="comment">-- copy indent from current line when starting a new line</span></span><br><span class="line">vim.opt.smartindent = <span class="literal">true</span> <span class="comment">-- make above smarter</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>tabstop</code>：指的是當文件中有 tab 字符時，會將其顯示成幾個空格的寬度，以及當在 insert mode 按下<code>&lt;Tab&gt;</code>時，會將連續多少的空格轉換成 tab 字符。</li>
<li><code>softtabstop</code>：當在 insert mode 按下<code>&lt;Tab&gt;</code>時，會插入多少個空格。</li>
<li><code>shiftwidth</code>：當使用<code>&gt;&gt;</code>或<code>&lt;&lt;</code>進行縮排，以及新增一行時自動縮排所移動的空格數。<blockquote>
<p>註：這可能有點複雜，舉個例子，當設定為<code>tabstop=8</code>，<code>softtabstop=4</code>，<code>shiftwidth=2</code>時，在 insert mode 中按第一次<code>&lt;Tab&gt;</code>會插入4個空格，再按一次則會將8個空格轉為1個 tab 字符，按第三次則會變成1個 tab 字符加上4個空格，以此類推。<br>而當我使用<code>&gt;&gt;</code>或<code>&lt;&lt;</code>，或是新增一行符合自動縮排的條件時，則整行會移動2個空格。</p>
</blockquote>
</li>
<li><code>smarttab</code>：當開啓時，當在行首進入 insert mode 插入<code>&lt;Tab&gt;</code>時，會根據<code>shiftwidth</code>的設定來插入空格，否則會插入根據<code>softtabstop</code>來插入，我覺得這相當混淆人，所以我選擇把它關閉。</li>
<li><code>expandtab</code>：將所有 tab 字符都擴展成空格，如果設為<code>true</code>，則上述的轉換規則就不適用了，所有的 tab 都會變成相應數量的空格。</li>
</ul>
<h4 id="wrap-and-scrolloff"><a href="#wrap-and-scrolloff" class="headerlink" title="wrap and scrolloff"></a>wrap and scrolloff</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- wrap and scrolloff --</span></span><br><span class="line">vim.opt.<span class="built_in">wrap</span> = <span class="literal">false</span> <span class="comment">-- line wrapping</span></span><br><span class="line">vim.opt.scrolloff = <span class="number">7</span> <span class="comment">-- minimal number of screen lines to keep above and below the cursor</span></span><br><span class="line">vim.opt.sidescrolloff = <span class="number">10</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>wrap</code>：當你的文字長度超出視窗邊框時，是否換行顯示。</li>
<li><code>scrolloff</code>：當視窗 上&#x2F;下 捲動時，顯示在遊標 上&#x2F;下 的行數，如果你希望畫面捲動時，遊標始終在正中央的位置，可以選擇把它設成 999 之類的極大數字。</li>
<li><code>sidescrolloff</code>：和 scrolloff 相同，不過是左右方向的。<br><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202403061709486.png"></li>
</ul>
<h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- search --</span></span><br><span class="line">vim.opt.hlsearch = <span class="literal">false</span></span><br><span class="line">vim.opt.incsearch = <span class="literal">true</span> <span class="comment">-- search while typing a search command</span></span><br><span class="line">vim.opt.smartcase = <span class="literal">true</span> <span class="comment">-- if you type a capital letter, it will be case sensitive</span></span><br><span class="line"><span class="comment">-- vim.opt.ignorecase = true</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>smartcase</code>：當搜尋的 pattern 中有大寫時，搜尋會變成 case sensitive，否則 ignore case，另外如果將它設為 true，它會覆蓋掉 ignorecase 選項的設定。</li>
</ul>
<h4 id="splitting-windows"><a href="#splitting-windows" class="headerlink" title="splitting windows"></a>splitting windows</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- splitting windows --</span></span><br><span class="line">vim.opt.splitright = <span class="literal">true</span> <span class="comment">-- split vertical widow to the right</span></span><br><span class="line">vim.opt.splitbelow = <span class="literal">true</span> <span class="comment">-- split horizontal widow to the below</span></span><br><span class="line">vim.opt.equalalways = <span class="literal">false</span> <span class="comment">-- don&#x27;t resize windows when splitting</span></span><br></pre></td></tr></table></figure>

<p>當分割視窗時，Neovim 預設分割新視窗是開在左上的，這太反人類了，所以你可以透過第一二條設定來把它改成開在右下。</p>
<p>而 <code>equalalways</code> 的作用則是當分割出新視窗時，要不要自動調整平分所有視窗的長寬，如果設為 false，則它只會將最右或最下側的視窗平分而已</p>
<ul>
<li><p><code>equalalways = true</code><br><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202403061737397.gif"></p>
</li>
<li><p><code>equalalways = false</code><br><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202403061739861.gif"></p>
</li>
</ul>
<h4 id="appearance"><a href="#appearance" class="headerlink" title="appearance"></a>appearance</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- appearance --</span></span><br><span class="line">vim.opt.showtabline = <span class="number">2</span> <span class="comment">-- always show tabline</span></span><br><span class="line">vim.opt.cursorline = <span class="literal">true</span></span><br><span class="line">vim.opt.cmdheight = <span class="number">1</span></span><br><span class="line">vim.opt.pumheight = <span class="number">10</span> <span class="comment">-- pop up menu height</span></span><br><span class="line">vim.opt.showmode = <span class="literal">false</span> <span class="comment">-- with lualine, we don&#x27;t need to show things like -- insert -- anymore</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>showtabline</code>：設為 0 時永不顯示，1 時只有當存在兩個 tab 以上時才會顯示，2 則永遠顯示。</li>
<li><code>cursorline</code>：開啓會將遊標所在行的行數加上醒目提示，如果想將所在列也標亮，可以調整<code>cursorcolumn</code>選項。</li>
<li><code>pumheight</code>：顯示彈出式菜單的最大行數。（之後使用 cmp 功能時才會有比較明顯的體現。）</li>
</ul>
<h4 id="auto-commenting"><a href="#auto-commenting" class="headerlink" title="auto-commenting"></a>auto-commenting</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">vim.cmd(<span class="string">&quot;autocmd bufenter * set formatoptions-=cro&quot;</span>) <span class="comment">-- disable auto-commenting new lines</span></span><br></pre></td></tr></table></figure>

<p>如果你希望在註解行上用例如<code>o</code>或<code>O</code>等指令新增空白行時，會自動加上註解標籤的話，可以把這行刪掉，而我不喜歡它，所以我這裡把它關掉了。</p>
<hr>
<h2 id="依賴環境安裝與設定"><a href="#依賴環境安裝與設定" class="headerlink" title="依賴環境安裝與設定"></a>依賴環境安裝與設定</h2><p>還記得我們之前提過的<code>:checkhealth</code>嗎，如果你現在打開它，應該會發現在 provider 一區裡，經過我們剛才對剪貼簿的處理，Clipboard 已經顯示為 OK 了：</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202403061834582.png"></p>
<p>接下來，由於我經常使用到 Python3 的開發環境，加上之後安裝的許多外掛也可能依賴於 Python3 provider，所以我這裡會將它安裝和設定起來。</p>
<h3 id="安裝-python3"><a href="#安裝-python3" class="headerlink" title="安裝 python3"></a>安裝 python3</h3><p>Ubuntu 22.04 中應該已經自帶 python3.10，如果沒有的話，可以透過以下的指令下載。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install software-properties-common -y</span><br><span class="line">sudo add-apt-repository ppa:deadsnakes/ppa</span><br><span class="line">sudo apt-get install python3.10 -y</span><br></pre></td></tr></table></figure>

<h3 id="安裝-pip"><a href="#安裝-pip" class="headerlink" title="安裝 pip"></a>安裝 pip</h3><p>pip 是 Python 的軟體包管理工具，是使用 Python 必須安裝的工具之一。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python3-pip -y</span><br></pre></td></tr></table></figure>

<h3 id="安裝-pynvim"><a href="#安裝-pynvim" class="headerlink" title="安裝 pynvim"></a>安裝 pynvim</h3><p>pynvim 就是 Neovim 之所以依賴於 Python3 的原因了，他是 Neovim 在 python 中的外掛。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install --user --upgrade pynvim</span><br></pre></td></tr></table></figure>

<p>通常到這裏就結束了，不過如果你的系統中存在多個版本的 Python 的話，建議到 <code>options.lua</code> 中加入類似下面這條設定，來指定 Neovim 取用的 Python 路徑：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">vim.g.python3_host_prog = <span class="string">&quot;/bin/pythin3&quot;</span></span><br></pre></td></tr></table></figure>

<p>至此，再看<code>:checkhealth provider</code>的話，應該就可以看到 Python3 一區也都變 OK 了，而至於其他 provider，由於目前還沒用到，加上我其實也對它們不是很了解，所以我沒有多做處理了。</p>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>至此，就是本章的所有內容了，Neovim 終於至少看起來像個人，但離稱手還是有相當大的差距，而在下一章裡，我將會介紹如何設定快捷鍵（Keymaps）。</p>
<p>與這章的後半段類似，我會分享並說明我的 keymaps 設定，裡頭有許多我覺得實用甚至堪稱魔法的神奇設定，將在下一章誠心推薦給各位。</p>
<p><big>上一篇： <a href="/2024/02/18/neovim-setup-20240218-help-checkhealth-and-provider/" title="救救我啊我救我 —— help 與 checkhealth">救救我啊我救我 —— help 與 checkhealth</a></big><br><big>下一篇： <a href="/2024/06/18/neovim-setup-20240618-nvim-keymaps/" title="Neovim 快捷鍵設定">Neovim 快捷鍵設定</a></big></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://youtu.be/87AXw9Quy9U?si=smiJPQVs8mFlnQJK">Understanding Neovim #1 - Installation</a></li>
<li><a href="https://youtu.be/Cp0iap9u29c?si=vPM9KSbds-b93zwS">Understanding Neovim #6 - Taming the vim.opt Madness</a></li>
<li><a href="https://youtu.be/hY5-Q6NxQgY?si=5e_ffJc2o4d4h5t3">Neovim - Setting options with Lua</a></li>
</ul>
]]></content>
      <categories>
        <category>Neovim</category>
      </categories>
      <tags>
        <tag>Neovim</tag>
      </tags>
  </entry>
  <entry>
    <title>Neovim 快捷鍵設定</title>
    <url>/2024/06/18/neovim-setup-20240618-nvim-keymaps/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Vim motion 的核心之一就在於直觀且可高度客製化的快捷鍵設定，要想如臂使指般地使用 Neovim，一套精心調教過的快捷鍵絕對是不可或缺的，尤其無論是在 Vim 還是 Neovim 中，都遺留了一些老舊且稍微有些反人類的操作設定，以及缺少了現代人習以為常的方便功能。</p>
<p>所幸， Neovim 的快捷鍵設定相當直觀、便利且強大，你可以透過它來簡化一些繁瑣的操作、使用額外外掛的功能、你甚至可以直接實現一些組合功能，而不需要另外下載功能外掛，我將會在後續的介紹中進行示範。</p>
<p>在本篇裡，我將介紹如何設定 Neovim 的快捷鍵，並分享我的設定。如果想直接複製我的設定文件，可以到<a href="https://github.com/Imp1ication/impvim/blob/master/lua/imp/keymaps.lua">這裡（我的 github）</a>來複製完整版的內容。</p>
<p>另外切記，在 Neovim 中，千萬不要去強記任何的快捷鍵，而是將你的習慣告訴 Neovim，讓它成為你的形狀。</p>
<hr>
<h2 id="建立設定文件與引用"><a href="#建立設定文件與引用" class="headerlink" title="建立設定文件與引用"></a>建立設定文件與引用</h2><p>還記得我們在上一篇： <a href="/2024/03/06/neovim-setup-20240306-nvim-basic-config/" title="Neovim 設定文件結構與基礎功能設定">Neovim 設定文件結構與基礎功能設定</a> 中提過的文件結構嗎，首先，到 <code>imp/</code> 中建立這次要使用的設定文件 <code>keymaps.lua</code>。</p>
<p>接著，編輯 <code>init.lua</code>，加入以下的程式碼來引用它：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;imp/keymaps&quot;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Leader-Key"><a href="#Leader-Key" class="headerlink" title="Leader Key"></a>Leader Key</h2><p>在 Neovim 中，Leader key是一個通用的快捷鍵前綴，用來做為大部分快捷鍵的起頭，預設為 <code>\</code> ，有些人喜歡使用 <code>;</code> 或 <code>,</code> ，而我則比較喜歡使用空白鍵。</p>
<p>編輯 <code>keymaps.lua</code>，加入以下內容：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">vim.g.mapleader = <span class="string">&quot; &quot;</span></span><br></pre></td></tr></table></figure>

<p>這樣，我們就設定完成了。</p>
<hr>
<h2 id="如何設定快捷鍵？"><a href="#如何設定快捷鍵？" class="headerlink" title="如何設定快捷鍵？"></a>如何設定快捷鍵？</h2><p>在 Neovim 中，我們主要依靠以下兩個 api 來設定快捷鍵：</p>
<ul>
<li>vim.keymap.del()：刪除快捷鍵。</li>
<li>vim.keymap.set()：設定快捷鍵。</li>
</ul>
<p>不過，有鑑於 <code>vim.keymap.set</code> 本身就會覆寫原有的快捷鍵，所以其實我沒怎麽用過 <code>vim.keymap.del</code>，以下將著重說明 <code>vim.keymap.set</code> 的使用，如果想看更詳細的說明，也可以使用指令 <code>:h vim.keymap</code> 來查看官方的說明文件。</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202406181812734.png" alt="vim.keymap.set"></p>
<p><code>vim.keymap.set</code> 包含了四個參數：</p>
<ol>
<li><code>&#123;mode&#125;</code>：快捷鍵作用的模式，包含 n、i、v、t、c 五個基本模式，可以傳入單個字元如 <code>“n&quot;</code>，或一個 list 如 <code>&#123;&quot;n&quot;, &quot;i&quot;&#125;</code> 來讓快捷鍵作用在複數模式中。</li>
<li><code>&#123;lhs&#125;</code>：你想設定的快捷鍵。</li>
<li><code>&#123;rhs&#125;</code>：快捷鍵觸發的操作，可以是一系列的按鍵組合、一條指令或是一個 expression。</li>
<li><code>&#123;opts&#125;</code>：快捷鍵的選項表，主要包含：<ul>
<li>noremap：設定為 <code>true</code> 時，表示這個快捷鍵的映射是非遞迴的。例如，當你同時有快捷鍵 <code>A-&gt;B</code>和 <code>B-&gt;C</code> 時，如果你將這項設為 <code>false</code> ，則 <code>A</code> 就會被映射為 <code>C</code>，反之則為 <code>B</code>。</li>
<li>silent：設定為 <code>true</code> 時，執行快捷鍵時不會在命令行中顯示訊息。</li>
<li>expr：設定為 <code>true</code> 時，表示 <code>&#123;rhs&#125;</code> 的內容將做為 expression 求值。</li>
<li>nowait：設定為 <code>true</code> 時，表示立刻執行映射，不等待更多输入。</li>
<li>desc：為快捷鍵添加描述，用於讓額外外掛（如 which-key）取用來顯示提示訊息。</li>
<li>buffer：設定為 <code>true</code> 時，表示這個快捷鍵只會對當前 buffer 作用。</li>
</ul>
</li>
</ol>
<p>以上是我有使用過的一些 <code>&#123;opts&#125;</code>，其他更多內容可以參考 <code>:h maparg</code>。</p>
<p>來舉個例子吧：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Add empty line without get into Insert mode</span></span><br><span class="line">vim.keymap.set(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;CR&gt;&quot;</span>, <span class="string">&quot;o&lt;Esc&gt;k&quot;</span>, &#123; noremap = <span class="literal">true</span>, silent = <span class="literal">true</span>, desc = <span class="string">&quot;Add empty line&quot;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Press jj to exit insert mode</span></span><br><span class="line">vim.keymap.set(<span class="string">&quot;i&quot;</span>, <span class="string">&quot;jj&quot;</span>, <span class="string">&quot;&lt;Esc&gt;&quot;</span>, &#123; noremap = <span class="literal">true</span>, silent = <span class="literal">true</span>, desc = <span class="string">&quot;Exit insert mode&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>在第一個例子中，我將 Normal mode 中的 <code>&lt;CR&gt;</code> 鍵映射成了一段連續的操作 <code>o&lt;Esc&gt;k</code>，如果你很熟悉 Vim 指令的話，應該馬上就能反應過來它的意思：<code>o</code> 新增一行、<code>&lt;Esc&gt;</code> 返回 Normal mode、然後 <code>k</code> 將遊標移回原本的所在行。</p>
<p>也就是說，它會維持遊標的位置，並在下方插入一個空白行。</p>
<p>而在第二個例子中，我將 Insert mode 中的 <code>jj</code> 輸入映射成 <code>&lt;Esc&gt;</code> 鍵，也就是只要我在 Insert mode 時輸入 <code>jj</code> ，就可以退出 Insert mode。另外僅供參考，也有些人會將其設為 <code>jk</code>。</p>
<p>另外，你可能會注意到，<code>&lt;CR&gt;</code> 鍵是什麼？以及，如果我想加入 Ctrl 或 Shift 鍵時，我應該怎麽表示？放心，我也很常忘記，所以在這裡我列出了一些常見的功能鍵的表示方法，以供查詢：</p>
<table>
<thead>
<tr>
<th>鍵</th>
<th>符號</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td>Leader</td>
<td><code>&lt;leader&gt;</code></td>
<td align="left">用於部分快捷鍵的前綴，預設是 <code>\</code>，可自行更改。</td>
</tr>
<tr>
<td>Enter</td>
<td><code>&lt;CR&gt;</code></td>
<td align="left">Enter 鍵。</td>
</tr>
<tr>
<td>Control</td>
<td><code>&lt;C-</code></td>
<td align="left">Ctrl鍵，例如 <code>&lt;C-n&gt;</code> 表示 Ctrl + n。</td>
</tr>
<tr>
<td>Shift</td>
<td><code>&lt;S-</code></td>
<td align="left">Shift 鍵，例如 <code>&lt;S-h&gt;</code> 表示 Shift + h。</td>
</tr>
<tr>
<td>Alt</td>
<td><code>&lt;A-</code></td>
<td align="left">Alt 鍵，例如 <code>&lt;A-x&gt;</code> 表示 Alt + x。</td>
</tr>
<tr>
<td>Meta</td>
<td><code>&lt;M-</code></td>
<td align="left">Meta 鍵，一般就是指 Alt 鍵。</td>
</tr>
<tr>
<td>Escape</td>
<td><code>&lt;Esc&gt;</code></td>
<td align="left">Esc 鍵。</td>
</tr>
<tr>
<td>Backspace</td>
<td><code>&lt;BS&gt;</code></td>
<td align="left">退格鍵。</td>
</tr>
<tr>
<td>Space</td>
<td><code>&lt;Space&gt;</code></td>
<td align="left">空白鍵。</td>
</tr>
<tr>
<td>Tab</td>
<td><code>&lt;Tab&gt;</code></td>
<td align="left">Tab 鍵。</td>
</tr>
<tr>
<td>Arrow Up</td>
<td><code>&lt;Up&gt;</code></td>
<td align="left">向上箭頭，可以用類似 <code>&lt;C-UP&gt;</code> 的方式與功能鍵組合。</td>
</tr>
<tr>
<td>Arrow Down</td>
<td><code>&lt;Down&gt;</code></td>
<td align="left">向下箭頭。</td>
</tr>
<tr>
<td>Arrow Left</td>
<td><code>&lt;Left&gt;</code></td>
<td align="left">向左箭頭。</td>
</tr>
<tr>
<td>Arrow Right</td>
<td><code>&lt;Right&gt;</code></td>
<td align="left">向右箭頭。</td>
</tr>
<tr>
<td>Delete</td>
<td><code>&lt;Del&gt;</code></td>
<td align="left">Delete 鍵。</td>
</tr>
<tr>
<td>Function Key</td>
<td><code>&lt;F1&gt;</code> to <code>&lt;F12&gt;</code></td>
<td align="left">功能鍵 F1 到 F12。</td>
</tr>
</tbody></table>
<hr>
<h2 id="keymaps-lua-完整說明"><a href="#keymaps-lua-完整說明" class="headerlink" title="keymaps.lua 完整說明"></a>keymaps.lua 完整說明</h2><p>至此，想必你已經可以開始調整屬於你的快捷鍵了，而接下來我將對我的設定內容進行分類介紹，同樣地，完整的設定檔可以到<a href="https://github.com/Imp1ication/impvim/blob/master/lua/imp/keymaps.lua">這裡（我的 github）</a>查看，你可以直接複製再根據需求進行調整，但就像我說的，這是我習慣的快捷鍵組合，它不一定適合你，不要去強記任何人的快捷鍵，而是要讓 Neovim 來配合你的習慣。</p>
<p>最好的驗證方法就是，當你設定完快捷鍵之後，你是不是能馬上想起大部分的內容，而不需要一再重新去查看。我個人的習慣是，盡量使用與動作單字相關的字母，例如 Delete 就用 d，Replace 就用 r 之類的。</p>
<h3 id="preliminary-setup"><a href="#preliminary-setup" class="headerlink" title="preliminary setup"></a>preliminary setup</h3><p>首先是一些基本設定：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Set Leader key to Space --</span></span><br><span class="line">vim.g.mapleader = <span class="string">&quot; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Shorten function name --</span></span><br><span class="line"><span class="keyword">local</span> keymap = vim.keymap.set</span><br><span class="line"><span class="keyword">local</span> opts = &#123; noremap = <span class="literal">true</span>, silent = <span class="literal">true</span> &#125;</span><br></pre></td></tr></table></figure>

<p>這裡我首先將 Leader key 設為了空白鍵；接著，因為接下來我們會設定很多的快捷鍵，為了讓文件簡潔一些，我將一些會重複使用的內容保存為本地變數，包含將 <code>vim.keymap.set</code> 存為 <code>keymap</code>，以及將我常用的 <code>&#123;opts&#125;</code> 選項保存為 <code>opts</code>。</p>
<p>這樣，我們就可以透過 <code>keymap(&quot;n&quot;, &quot;快捷鍵&quot;, &quot;映射&quot;, opts)</code> 的方式來設定大多數的快捷鍵了。</p>
<h3 id="cursor-jumping"><a href="#cursor-jumping" class="headerlink" title="cursor jumping"></a>cursor jumping</h3><p>在 Neovim 的預設中，<code>&lt;C-u&gt;</code> 和 <code>&lt;C-d&gt;</code> 分別會將遊標向上或下移動半頁，再將遊標當前行捲到頁面頂部（會保留 scrolloff 的行數）。而這個「半頁」的行數是根據你當前視窗的可視行數來動態決定的，例如當你的視窗可以顯示 50 行，那半頁就是 25 行。</p>
<p>像這樣不固定的行數對我來說很煩，所以我決定將它固定在 15 行。以及，我喜歡在每次遊標進行例如翻頁、或搜尋關鍵字等大幅跳行的行為時，將遊標固定在特定位置，以避免找不到遊標在哪。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Normal --</span></span><br><span class="line"><span class="comment">-- Page up and down</span></span><br><span class="line">keymap(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-u&gt;&quot;</span>, <span class="string">&quot;15kztzv&quot;</span>, opts)</span><br><span class="line">keymap(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-d&gt;&quot;</span>, <span class="string">&quot;15jztzv&quot;</span>, opts)</span><br><span class="line">keymap(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;Gzzzv&quot;</span>, opts)</span><br><span class="line">keymap(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gg&quot;</span>, <span class="string">&quot;ggzzzv&quot;</span>, opts)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Keep cursor at the middle after search jumping</span></span><br><span class="line">keymap(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;nztzv&quot;</span>, opts)</span><br><span class="line">keymap(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;Nztzv&quot;</span>, opts)</span><br></pre></td></tr></table></figure>

<p>說明：</p>
<ul>
<li>固定翻頁行數：設定 <code>&lt;C-u&gt;</code> 和 <code>&lt;C-d&gt;</code> 的移動行數為 15 行。</li>
<li>移動後的遊標位置：<ul>
<li>zt：將遊標所在行捲到頂部。</li>
<li>zz：將遊標所在行捲到中間。</li>
<li>zb：將遊標所在行捲到底部。</li>
</ul>
</li>
<li>zv：展開遊標所在行的程式碼摺疊。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202406181824855.gif"></p>
<h3 id="move-in-warpline"><a href="#move-in-warpline" class="headerlink" title="move in warpline"></a>move in warpline</h3><p>在 Neovim 中，當一行文字過長而被換行顯示時，在使用普通模式下的 <code>j</code> 和 <code>k</code> 鍵移動時，會跳到實際的下一行或上一行，而不是視覺上的換行。要在視覺行內移動，則必須使用 <code>gj</code> 和 <code>gk</code> 來移動。為了方便，我決定把它們的功能互換。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Move in warpline</span></span><br><span class="line">keymap(&#123; <span class="string">&quot;n&quot;</span>, <span class="string">&quot;v&quot;</span> &#125;, <span class="string">&quot;j&quot;</span>, <span class="string">&quot;gj&quot;</span>, opts)</span><br><span class="line">keymap(&#123; <span class="string">&quot;n&quot;</span>, <span class="string">&quot;v&quot;</span> &#125;, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;gk&quot;</span>, opts)</span><br><span class="line">keymap(&#123; <span class="string">&quot;n&quot;</span>, <span class="string">&quot;v&quot;</span> &#125;, <span class="string">&quot;gj&quot;</span>, <span class="string">&quot;j&quot;</span>, opts)</span><br><span class="line">keymap(&#123; <span class="string">&quot;n&quot;</span>, <span class="string">&quot;v&quot;</span> &#125;, <span class="string">&quot;gk&quot;</span>, <span class="string">&quot;k&quot;</span>, opts)</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202406181826105.gif"></p>
<h3 id="normal-trick"><a href="#normal-trick" class="headerlink" title="normal trick"></a>normal trick</h3><p>以下是一些我在 Normal mode 中的自定功能：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Add empty line without get into Insert mode</span></span><br><span class="line">keymap(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;CR&gt;&quot;</span>, <span class="string">&quot;o&lt;Esc&gt;k&quot;</span>, opts)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Delete into void</span></span><br><span class="line">keymap(&#123;<span class="string">&quot;n&quot;</span>, <span class="string">&quot;v&quot;</span>&#125;, <span class="string">&quot;&lt;leader&gt;d&quot;</span>, <span class="string">&#x27;&quot;_d&#x27;</span>, opts)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Replace all</span></span><br><span class="line">keymap(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;r&quot;</span>, <span class="string">[[:%s/\&lt;&lt;C-r&gt;&lt;C-w&gt;\&gt;/&lt;C-r&gt;&lt;C-w&gt;/gI&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;]]</span>, opts)</span><br></pre></td></tr></table></figure>

<p>說明：</p>
<ul>
<li><code>&lt;CR&gt;</code> 會在下方新增空行且不進入插入模式。</li>
<li><code>&lt;leader&gt;d</code>：Neovim 中使用 d 來刪除文字時會同時將刪除的內容放入剪貼簿中，這有時很煩，所以我多設定了一個快捷鍵，來將不要的內容刪除且不放入剪貼簿中。</li>
<li><code>&lt;leader&gt;r</code>：選中遊標當前所在的單字，並對文件中所有相同的單字進行替換操作。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202406181827330.gif"></p>
<h3 id="window-navigation"><a href="#window-navigation" class="headerlink" title="window navigation"></a>window navigation</h3><p>以下是一些自定的視窗管理快捷鍵，包含切換視窗，以及調整視窗大小：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Window navigation</span></span><br><span class="line">keymap(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-h&gt;&quot;</span>, <span class="string">&quot;&lt;C-w&gt;h&quot;</span>, opts)</span><br><span class="line">keymap(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-j&gt;&quot;</span>, <span class="string">&quot;&lt;C-w&gt;j&quot;</span>, opts)</span><br><span class="line">keymap(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-k&gt;&quot;</span>, <span class="string">&quot;&lt;C-w&gt;k&quot;</span>, opts)</span><br><span class="line">keymap(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-l&gt;&quot;</span>, <span class="string">&quot;&lt;C-w&gt;l&quot;</span>, opts)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Resize with arrows</span></span><br><span class="line">keymap(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-Up&gt;&quot;</span>, <span class="string">&quot;:resize +2&lt;CR&gt;&quot;</span>, opts)</span><br><span class="line">keymap(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-Down&gt;&quot;</span>, <span class="string">&quot;:resize -2&lt;CR&gt;&quot;</span>, opts)</span><br><span class="line">keymap(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-Left&gt;&quot;</span>, <span class="string">&quot;:vertical resize -2&lt;CR&gt;&quot;</span>, opts)</span><br><span class="line">keymap(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-Right&gt;&quot;</span>, <span class="string">&quot;:vertical resize +2&lt;CR&gt;&quot;</span>, opts)</span><br></pre></td></tr></table></figure>

<p>說明：</p>
<ul>
<li>視窗導航：<ul>
<li><code>&lt;C-h&gt;</code>：移動到左側視窗。</li>
<li><code>&lt;C-j&gt;</code>：移動到下方視窗。</li>
<li><code>&lt;C-k&gt;</code>：移動到上方視窗。</li>
<li><code>&lt;C-l&gt;</code>：移動到右側視窗。</li>
</ul>
</li>
<li>調整視窗大小：<ul>
<li><code>&lt;C-Up&gt;</code>：增加視窗高度。</li>
<li><code>&lt;C-Down&gt;</code>：減少視窗高度。</li>
<li><code>&lt;C-Left&gt;</code>：減少視窗寬度。</li>
<li><code>&lt;C-Right&gt;</code>：增加視窗寬度。</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202406181829552.gif"></p>
<h3 id="insert-and-visual-trick"><a href="#insert-and-visual-trick" class="headerlink" title="insert and visual trick"></a>insert and visual trick</h3><p>以下是一些我在 Insert 和 Visual mode 中的自定快捷鍵：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Insert --</span></span><br><span class="line"><span class="comment">-- Press jj to exit insert mode</span></span><br><span class="line">keymap(<span class="string">&quot;i&quot;</span>, <span class="string">&quot;jj&quot;</span>, <span class="string">&quot;&lt;Esc&gt;&quot;</span>, opts)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Visual --</span></span><br><span class="line"><span class="comment">-- Stay in indent mode</span></span><br><span class="line">keymap(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&lt;gv&quot;</span>, opts)</span><br><span class="line">keymap(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;&gt;gv&quot;</span>, opts)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Keep paste buffer after paste</span></span><br><span class="line">keymap(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&#x27;&quot;_dP&#x27;</span>, opts)</span><br><span class="line">keymap(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;&lt;leader&gt;p&quot;</span>, <span class="string">&quot;p&quot;</span>, opts)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Move text up and down</span></span><br><span class="line">keymap(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;:m &#x27;&gt;+1&lt;CR&gt;gv=gv&quot;</span>, opts)</span><br><span class="line">keymap(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;:m &#x27;&lt;-2&lt;CR&gt;gv=gv&quot;</span>, opts)</span><br></pre></td></tr></table></figure>

<p>說明：</p>
<ul>
<li>插入模式：使用 <code>jj</code> 來退出插入模式。</li>
<li>縮排改進：在 Visual mode 時，輸入 <code>&gt;</code> 或 <code>&lt;</code> 會增加或減少遊標所在行的縮排，並回到 Normal mode。這不太直覺，所以我將其改為縮排後仍保持原先的選取狀態，這樣就能進行連續縮排了。</li>
<li>貼上改進：在 Visual mode 時，輸入 <code>p</code> 會將選取的內容與剪貼簿中的內容交換，這太反人類了，所以我將它改成在貼上後仍保持剪貼簿的內容不變，而如果今天我就是要交換內容，則改使用 <code>&lt;leader&gt;p</code> 。</li>
<li>行移動：當在 Visual mode 時輸入 <code>J</code> 或 <code>K</code>，可以將選取的行下移或上移，這超好用，個人強推。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202406181832775.gif"></p>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>至此，就是本章的所有內容了，相信你也見識到了 keymaps 的便捷與強大，只要你想，你甚至可以將 h&#x2F;j&#x2F;k&#x2F;l 的移動方式改成 w&#x2F;a&#x2F;s&#x2F;d ，雖然我不建議這麼做就是了。</p>
<p>這份 <code>keymaps.lua</code> 可能會是你將來在使用 Neovim 時最常更動的設定文件，無論是不斷的調教，還是在安裝了眾多的額外外掛後，替外掛的功能設定新的快捷鍵，都可以透過編輯這個檔案，來將各式各樣的功能快捷統一整理在一個文檔當中，相當方便。</p>
<p>而在下一章裡，我們將開始進入到 Neovim 最深遠的巨坑：外掛的安裝與管理。</p>
<p><big>上一篇： <a href="/2024/03/06/neovim-setup-20240306-nvim-basic-config/" title="Neovim 設定文件結構與基礎功能設定">Neovim 設定文件結構與基礎功能設定</a></big><br><big>下一篇： <a href="/2024/06/20/neovim-setup-20240620-nvim-lazy/" title="Neovim 外掛管理工具 —— lazy.nvim">Neovim 外掛管理工具 —— lazy.nvim</a></big></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://youtu.be/435-amtVYJ8?si=iYDIY30iHYjTDaOl">Neovim - ~25 Custom Keymaps set with Lua</a></li>
</ul>
]]></content>
      <categories>
        <category>Neovim</category>
      </categories>
      <tags>
        <tag>Neovim</tag>
      </tags>
  </entry>
  <entry>
    <title>第一個外掛 —— 顔色主題 Colorscheme</title>
    <url>/2024/06/21/neovim-setup-20240621-nvim-colorscheme/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>俗話說得好：「顏值即是戰鬥力」，好看的配色是工程師寫扣的熱情來源之一，也因此 Neovim 社群至今產出了大量的顏色主題、以及許多用來製作個人顏色主題的外掛工具。</p>
<p>你可以先到我們上一章提到過的 <a href="https://github.com/rockerBOO/awesome-neovim?tab=readme-ov-file#colorscheme">Awesome Neovim</a> 中，去找一套自己喜歡的顏色主題。或者，我更推薦 <a href="https://dotfyle.com/neovim/colorscheme/trending">Trending Neovim Colorschemes</a> 這個網站，除了羅列了許多常見的顏色主題外，還附帶預覽圖，甚是方便。</p>
<p>而本章則只紀錄幾個我常用的顏色主題，包含：</p>
<ul>
<li><a href="https://github.com/folke/tokyonight.nvim">tokyonight</a></li>
<li><a href="https://github.com/rebelot/kanagawa.nvim">kanagawa</a></li>
<li><a href="https://github.com/oxfist/night-owl.nvim">night-owl</a></li>
<li><a href="https://github.com/sainnhe/sonokai">sonokai</a></li>
<li><a href="https://github.com/ellisonleao/gruvbox.nvim">gruvbox</a></li>
</ul>
<p>本章主要會使用範例的方式來說明如何下載與啟用顏色主題，如果想直接複製我的設定文件，可以到<a href="https://github.com/Imp1ication/impvim/blob/master/lua/imp/plugins/colorshceme.lua">這裡（我的 github）</a>來複製完整版的內容。</p>
<p>另外，我們將使用 lazy.nvim 來做為外掛管理器下載它們，如果你還不知到什麼是 lazy.nvim 的話，建議先回去看<a href="/2024/06/20/neovim-setup-20240620-nvim-lazy/" title="Neovim 外掛管理工具 —— lazy.nvim">上一章</a>。</p>
<hr>
<h2 id="下載外掛"><a href="#下載外掛" class="headerlink" title="下載外掛"></a>下載外掛</h2><p>首先，我們要先到 <code>imp/plugins/</code> 中新增一個設定文件 <code>colorscheme.lua</code>。</p>
<p>接著，如果你只要下載一個主題，你可以寫入以下內容：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="string">&quot;folke/tokyonight.nvim&quot;</span>,</span><br><span class="line">    lazy = <span class="literal">false</span>,</span><br><span class="line">    priority = <span class="number">1000</span>,</span><br><span class="line">    <span class="built_in">config</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="built_in">require</span>(<span class="string">&quot;tokyonight&quot;</span>).setup(&#123;</span><br><span class="line">            style = <span class="string">&quot;night&quot;</span>, <span class="comment">-- &quot;storm&quot;, &quot;moon&quot;, &quot;night&quot;, &quot;day&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        vim.cmd.colorscheme(<span class="string">&quot;tokyonight&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者，如果你和我一樣想下載多個主題來隨時切換，你可以採用這樣的寫法：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> colorscheme = <span class="string">&quot;kanagawa&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;folke/tokyonight.nvim&quot;</span>,</span><br><span class="line">        lazy = <span class="literal">false</span>,</span><br><span class="line">        priority = <span class="number">1000</span>,</span><br><span class="line">        <span class="built_in">config</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            <span class="built_in">require</span>(<span class="string">&quot;tokyonight&quot;</span>).setup(&#123;</span><br><span class="line">                style = <span class="string">&quot;night&quot;</span>, <span class="comment">-- &quot;storm&quot;, &quot;moon&quot;, &quot;night&quot;, &quot;day&quot;</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            vim.cmd.colorscheme(colorscheme)</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;rebelot/kanagawa.nvim&quot;</span>,</span><br><span class="line">        lazy = <span class="literal">false</span>,</span><br><span class="line">        priority = <span class="number">1000</span>,</span><br><span class="line">        <span class="built_in">config</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            <span class="built_in">require</span>(<span class="string">&quot;kanagawa&quot;</span>).setup(&#123;</span><br><span class="line">                background = &#123;</span><br><span class="line">                    dark = <span class="string">&quot;wave&quot;</span>, <span class="comment">-- &quot;wave&quot;, &quot;dragon&quot;, &quot;lotus&quot;</span></span><br><span class="line">                    light = <span class="string">&quot;lotus&quot;</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>儲存並重新開啟 Neovim 後，你應該會看到 lazy 的介面自動彈出，顯示它偵測到有新的外掛，並正在下載中，且在下載完成後，就會自動套用我們設定的顏色主題了。</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202406212254782.jpg"></p>
<hr>
<h2 id="plugin-spec-參數說明"><a href="#plugin-spec-參數說明" class="headerlink" title="plugin spec 參數說明"></a>plugin spec 參數說明</h2><p>先前我曾提到過，根據我們的設定，lazy 會訪問 <code>plugins/</code> 中所有的設定文件，並要求它們回傳一至多個 plugin spec，而這也就是這兩個例子的主要差別。</p>
<p>在第一個例子中，我們直接回傳了一個 spec，而在第二個例子中，我們則是回傳了一個由兩個 spec 所組成的列表。</p>
<p>plugin spec 是 lazy 用來描述外掛如何安裝和設定的表格，以第一個例子為例，它包含了以下幾個部分：</p>
<ol>
<li>第一個參數：外掛的下載位址。<br>spec 的第一個參數必須是外掛的下載位址，預設情況下，它指的是外掛在 Github 上的短網址，例如我們這裡的 <code>folke/tokyonight.nvim</code>，就是 <a href="https://github.com/folke/tokyonight.nvim">tokyonight</a> 主題的 Github 網址的末兩段。</li>
<li><code>lazy</code>：懶加載設定。<br>一個 boolean 值，當設為 <code>true</code> 時，lazy 會只有在 Neovim 運行過程中使用到外掛的功能時，才會將外掛載入運行；反之，則會在 Neovim 啟動時立即加載這個外掛。<br>有鑑於我們希望 Neovim 在開啟時就載入我們的顏色主題，所以這裡我們將其設定為 <code>false</code>。</li>
<li><code>priority</code>：加載優先級。<br>一個整數，當我們的外掛越來越多，加載時自然也就有個先後順序，lazy 預設的 <code>priority</code> 是 50，數字越大就越先加載。<br>有鑑於我們希望顏色主題可以優先於所有外掛啟動，因為有些外掛可以透過引用它們，來更改自己的 UI 設定，所以這裡官方的建議是將它設為 1000。</li>
</ol>
<hr>
<h2 id="外掛設定、config、與-opts"><a href="#外掛設定、config、與-opts" class="headerlink" title="外掛設定、config、與 opts"></a>外掛設定、config、與 opts</h2><p>在 Neovim 中，慣例而言我們會使用 <code>require(&quot;外掛名稱&quot;).setup(&#123;設定內容&#125;)</code> 這個函式來在 Neovim 開啟時啟動外掛，以及將傳入的設定內容與官方預設的設定項進行合併，來作為執行外掛時的設定項。</p>
<p>對此，lazy 在 spec 中提供了兩個參數：<code>config</code> 和 <code>opts</code>，來將這件事再更簡化一些。</p>
<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;folke/tokyonight.nvim&quot;</span>,</span><br><span class="line">    lazy = <span class="literal">false</span>,</span><br><span class="line">    priority = <span class="number">1000</span>,</span><br><span class="line">    <span class="built_in">config</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="built_in">require</span>(<span class="string">&quot;tokyonight&quot;</span>).setup(&#123;</span><br><span class="line">            style = <span class="string">&quot;night&quot;</span>, <span class="comment">-- &quot;storm&quot;, &quot;moon&quot;, &quot;night&quot;, &quot;day&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        vim.cmd.colorscheme(<span class="string">&quot;tokyonight&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>讓我們先來看第一個例子，在 lazy 中，<code>config</code> 可以是一個函數，它會在外掛加載後執行。</p>
<p>而在這個例子中，我們透過在函數中呼叫 <code>require(&quot;tokyonight&quot;).setup(&#123;設定內容&#125;)</code> 來啟用外掛，並同時對它進行設定。</p>
<p>注意，這個啟用和設定方式只是慣例，大多數常用外掛都是這麼做的，但還是有些不是，例如我所使用的顏色主題之一 <a href="https://github.com/sainnhe/sonokai">sonokai</a> 就不是這樣，所以具體該怎麼用，還是得看官方 Github 上的說明文件，唯一的共通點是，不論方式，你都可以把它寫在 <code>config</code> 之中。</p>
<p>至於設定內容有哪些可以調整，由於各個顏色主題的設定項都大同小異，且都不是特別重要，所以這裡就請各位自己去查看官方文件吧，或是在 Neovim 中輸入指令 <code>:help 主題名稱</code> ，通常都可以找到類似 Configuration 的設定教學文件。</p>
<p>而實際上，我也沒有調整太多東西，其實各主題的預設內容就已經很好用了。</p>
<p>而在 <code>config</code> 的最後，我調用了 <code>vim.cmd.colorscheme(colorscheme)</code> 這個 Lua 函式來將 Neovim 的主題更換成已經啟用的 tokyonight，或者，你也可以使用指令 <code>:colorscheme 主題名稱</code> 來手動套用顏色主題。</p>
<h3 id="opts"><a href="#opts" class="headerlink" title="opts"></a>opts</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;rebelot/kanagawa.nvim&quot;</span>,</span><br><span class="line">    lazy = <span class="literal">false</span>,</span><br><span class="line">    priority = <span class="number">1000</span>,</span><br><span class="line">    opts = &#123;</span><br><span class="line">        background = &#123;</span><br><span class="line">            dark = <span class="string">&quot;wave&quot;</span>, <span class="comment">-- &quot;wave&quot;, &quot;dragon&quot;, &quot;lotus&quot;</span></span><br><span class="line">            light = <span class="string">&quot;lotus&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接著我們來看第二個例子，<code>config</code> 除了設為函數外，其實還可以設為 <code>true</code>，而這也是 lazy 預設的選項。</p>
<p>當 <code>config</code> 為 <code>true</code> 時，lazy 會自動呼叫 <code>require(&quot;外掛名稱&quot;).setup(opts)</code> 來啟用和設定外掛。</p>
<p>所以就有了如上的第二種設定寫法，當外掛是使用上述方法來啟用和設定時，我們就可以不使用 <code>config</code> 參數（因為預設就是 <code>true</code> 了），而是直接把要調整的設定項寫在 <code>opts</code> 中即可，來使得設定文件更加簡潔一些。</p>
<p>不過這個寫法有一個壞處，就是你無法執行除了 setup 以外的其他事情，因為只要你將 <code>config</code> 改為了函數，<code>opts</code> 就會失效，等於你還是得用第一種的方式，來重寫你的設定項。</p>
<p>例如在這個例子中，我們還需要想辦法執行 <code>vim.cmd.colorscheme(&quot;顏色主題&quot;)</code> 來在每次 Neovim 開啟時自動套用顏色主題，所以，為了設定文件的一致性，我建議還是一律使用 <code>config</code> 來進行設定比較好。</p>
<hr>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>至此就是本章的所有內容了，Neovim 終於染上了自己喜歡的顏色，我們也終於對 lazy 的 plugin spec 有了基本的了解。</p>
<p>而在接下來的系列文中，我將會分成兩大部分：</p>
<ol>
<li><p>程式編輯核心外掛：這部分我將會介紹與程式編輯相關的核心外掛，包含自動補齊、語法引擎、語法凸顯、Linter、Formatter 以及 Debugger 等等。</p>
</li>
<li><p>常用功能外掛：這部分我將介紹一些我覺得很好用的功能外掛，包含文件瀏覽器、全域糢糊搜尋、索引標籤與狀態列、以及 Git 集成工具等等。</p>
</li>
</ol>
<p>至於下回預告，我也還不知道，還請各位敬請期待吧。</p>
<p><big>上一篇： <a href="/2024/06/20/neovim-setup-20240620-nvim-lazy/" title="Neovim 外掛管理工具 —— lazy.nvim">Neovim 外掛管理工具 —— lazy.nvim</a></big></p>
]]></content>
      <categories>
        <category>Neovim</category>
      </categories>
      <tags>
        <tag>Neovim</tag>
      </tags>
  </entry>
  <entry>
    <title>Neovim 外掛管理工具 —— lazy.nvim</title>
    <url>/2024/06/20/neovim-setup-20240620-nvim-lazy/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Neovim 的强大之一就在於小巧且種類繁多的功能外掛，基本上在 Neovim 的世界裡，只有你想不到的需求，沒有找不到的外掛，如果有，那就自己寫一個吧！</p>
<p>而隨著我們積年累月的使用與調教，外掛必定會越來越多，相依關係也勢必變得越來越複雜，這時有個方便的外掛管理工具就顯得非常重要了。</p>
<p>目前主流的工具有三個，分別是從 Vim8 延續下來，基於 Vim Script 所撰寫的 vim-plugs、使用 Lua 語言所撰寫的 packer.nvim（以下簡稱 packer），以及站在了 packer 的肩上，在推出後即廣受好評，同時也是我們這次的主角：lazy.nvim （以下簡稱 lazy）。</p>
<p>相較於 packer ，lazy 有著更強大的性能、以及更合理的外掛管理方式，且 packer 隨著的更新，它變得越來越混亂與臃腫，以致於在 lazy 出現後，packer 也原地爆炸，選擇停止維護。現在它轉生成了 pckr.nvim，但 packer 的官方也表明它沒有 lazy 來得穩定，而這也是我選擇從 packer 跳槽到 lazy 的主要原因。</p>
<p>所以，本章將介紹如何安裝與使用 lazy，如果你想直接複製完整的設定文件，也可以到<a href="https://github.com/Imp1ication/impvim/blob/master/lua/imp/lazy.lua">這裡（我的 github）</a>來複製完整的設定內容。</p>
<h2 id="下載-lazy"><a href="#下載-lazy" class="headerlink" title="下載 lazy"></a>下載 lazy</h2><p>首先，讓我們到 <code>imp/</code> 中新增一個設定文件 <code>lazy.lua</code>，以及一個之後用來放各個外掛的設定文件的資料夾 <code>plugins/</code>。</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202406201901880.jpg"></p>
<p>接著，編輯 <code>lazy.lua</code>，加入以下內容：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- bootstrap lazy.nvim</span></span><br><span class="line"><span class="keyword">local</span> lazypath = vim.fn.stdpath(<span class="string">&quot;data&quot;</span>) .. <span class="string">&quot;/lazy/lazy.nvim&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> (vim.uv <span class="keyword">or</span> vim.loop).fs_stat(lazypath) <span class="keyword">then</span></span><br><span class="line">  vim.fn.system(&#123;</span><br><span class="line">    <span class="string">&quot;git&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clone&quot;</span>,</span><br><span class="line">    <span class="string">&quot;--filter=blob:none&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://github.com/folke/lazy.nvim.git&quot;</span>,</span><br><span class="line">    <span class="string">&quot;--branch=stable&quot;</span>, <span class="comment">-- latest stable release</span></span><br><span class="line">    lazypath,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">vim.opt.rtp:prepend(lazypath)</span><br></pre></td></tr></table></figure>

<p>然後，不要忘了到 <code>init.lua</code> 中去引用它：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;imp.lazy&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>這段程式的作用是，它會在 Neovim 每次啟動時檢查你是否已經下載了 lazy，如果沒有，它就會自動下載。</p>
<p>重新啟動 Neovim，這時你應該會注意到它停頓了一下，不要緊張，這表示它正在下載 lazy，下載完成後，我們就可以開始使用 lazy 了。</p>
<p>接下來我會對這段程式進行較詳細的說明，算是我在看了<a href="https://youtu.be/N-RFCfs6rxI?si=uncBeCSDMHFWKs65&t=948">Understanding Neovim #2 - Plugins, Colorschemes</a>之後的學習筆記，如果沒興趣的話，可以直接跳到下一段。</p>
<ol>
<li><p>定義 lazy 的安裝路徑：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> lazypath = vim.fn.stdpath(<span class="string">&quot;data&quot;</span>) .. <span class="string">&quot;/lazy/lazy.nvim&quot;</span></span><br></pre></td></tr></table></figure>

<p>這裡使用了 <code>vim.fn.stdpath()</code> 來取得 Neovim 的 data 目錄路徑。我們可以直接在 Neovim 的 command line 中輸入以下指令來看看這個目錄究竟在哪：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">:lua <span class="built_in">print</span>(vim.fn.stdpath(<span class="string">&quot;data&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>一般來說，它應該會在 <code>~/.local/share/nvim</code>。然後，這行程式碼會將 lazy 的存放目錄設定為這個目錄下的 <code>lazy/lazy.nvim</code>。</p>
<p>另外，data 這個目錄主要被 Neovim 用於存放各個外掛的資料和原始碼，也就是說，如果你想要親自去修改外掛底層的程式的話，你可以來這裡找它。</p>
<p>而在過去沒有外掛管理器，或有外掛不支援管理器時，我們就是透過將外掛下載到這個目錄，然後再引用它們來使用的。</p>
</li>
<li><p>檢查並下載：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> (vim.uv <span class="keyword">or</span> vim.loop).fs_stat(lazypath) <span class="keyword">then</span></span><br><span class="line">  vim.fn.system(&#123;</span><br><span class="line">    <span class="string">&quot;git&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clone&quot;</span>,</span><br><span class="line">    <span class="string">&quot;--filter=blob:none&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://github.com/folke/lazy.nvim.git&quot;</span>,</span><br><span class="line">    <span class="string">&quot;--branch=stable&quot;</span>, <span class="comment">-- latest stable release</span></span><br><span class="line">    lazypath,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>這段程式會檢查你的 data 目錄中是否已經下載了 lazy，如果沒有，它就會自動下載。</p>
</li>
<li><p>將 lazy 加入到 run time path：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">vim.opt.rtp:prepend(lazypath)</span><br></pre></td></tr></table></figure>

<p>run time path 是一個目錄清單，當 Neovim 在運行並加載功能和外掛時，它會去訪問這個清單中的目錄，並從中尋找它需要的功能，而這也就是 Neovim 運行外掛的原理了。</p>
<p>另外，這裡使用 <code>prepend</code> 的目的是要將 lazy 加入這個清單的開頭，以確保 Neovim 在加載外掛時，會先透過 lazy，而非其他的目錄，以保證 lazy的正常運作並避免一些可能的衝突。</p>
</li>
</ol>
<h2 id="使用-lazy"><a href="#使用-lazy" class="headerlink" title="使用 lazy"></a>使用 lazy</h2><p>要使用 lazy，我們得去調用 lazy 的 <code>setup</code> 函式：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;lazy&quot;</span>).setup(plugins, opts)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>plugins</code>：一個外掛的規格清單，我會在後續做更詳細的說明。</li>
<li><code>opts</code>：lazy 的設定選項（皆為可選項）。</li>
</ul>
<p>在 <code>plugins</code> 中，我們可以直接提供一組外掛的清單和額外規格，來讓 lazy 去下載與使用它們，但顯然，這樣會讓這份設定文件變得非常巨大。</p>
<p>所幸，我們可以直接輸入一個目錄，讓 lazy 去載入目錄中的所有設定文件，這也是為什麼我們先前特地開了一個資料夾，用來存放之後要下載的外掛的設定文件。</p>
<p>而關於 <code>opts</code>，通常我不太會去動它，lazy 的預設設定基本上沒有任何問題，所以我只基於無聊去調整了一些無關緊要的設定，如果你有興趣，可以到<a href="https://github.com/folke/lazy.nvim#%EF%B8%8F-configuration">官方</a>去看看 lazy 有什麼設定項可以玩。</p>
<p>現在，讓我們編輯 <code>lazy.lua</code>，到先前的程式碼下方加入以下的內容來啟用 lazy：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;lazy&quot;</span>).setup(</span><br><span class="line">    &#123; &#123;import = <span class="string">&quot;imp.plugins&quot;</span>&#125; &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        checker = &#123;</span><br><span class="line">            enabled = <span class="literal">true</span>,</span><br><span class="line">            notify = <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        change_detection = &#123;</span><br><span class="line">            enabled = <span class="literal">true</span>,</span><br><span class="line">            notify = <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        ui = &#123;</span><br><span class="line">            border = <span class="string">&quot;rounded&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>說明：</p>
<ol>
<li>設定外掛來源：<br>首先，使用 <code>import</code> 來告訴 lazy 我們要用來存放外掛設定文件的目錄。</li>
<li>設定選項：<ul>
<li><code>checker</code>：它的作用是會自動檢查外掛是否有更新，但若每當有更新時就發出通知，那會很煩，所以我選擇啟用檢查，但關閉通知。</li>
<li><code>change_detection</code>：和 <code>checker</code> 類似，不過這項檢查的是我們的設定文件是否有更動。</li>
<li><code>ui</code>：我把 lazy 的 UI 邊框樣式改成圓角。</li>
</ul>
</li>
</ol>
<p>重新啟動 Neovim，這時你應該會發現它報錯了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error detected while processing /home/imp1ication/.config/nvim/init.lua:</span><br><span class="line">No specs found for module imp.plugins</span><br><span class="line">Press ENTER or type command to continue</span><br></pre></td></tr></table></figure>

<p>不要緊張，這只是因為我們的 <code>plugins/</code> 中還沒有任何的設定文件所導致的，讓我們先按下 Enter 鍵來跳過它的警告，然後輸入以下指令來開啟 lazy 的界面看看，確認 lazy 有在確實運作：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">:Lazy</span><br></pre></td></tr></table></figure>

<p>此時你應該就會看到類似如下的介面：</p>
<p><img src="https://raw.githubusercontent.com/Imp1ication/for-picgo/main/picgo202406201901947.jpg"></p>
<p>可以看到 Lazy 已經可以正確運行了，而且裡面已經有一個外掛，也就是 lazy 自己。</p>
<p>你可以將遊標移動到外掛名稱上面，然後輸入介面上方提供的，對應的大寫字母來對外掛進行管理操作，例如輸入 <code>L</code> 可以查看外掛的 Log，輸入 <code>U</code> 可以更新外掛等等。而這也就是 lazy 的基本使用方式了。</p>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>至此，就是本章的所有內容了，lazy 已經能正確運作，而在下一章裡，我們終於要來開始下載與使用外掛。</p>
<p>而除了外掛本身的設定項外，lazy 在導入外掛時，還提供了許多的外掛規格（plugin spec）可以設定，包含它們的啟用條件、指定 commit 版本、以及其他的依賴外掛等等。</p>
<p>完整的說明同樣可以到<a href="https://github.com/folke/lazy.nvim#-plugin-spec">官方</a>去查看，而在之後的文章中，我只會對我有用到的部分進行說明。</p>
<p>另外，你也可以先到 <a href="https://github.com/rockerBOO/awesome-neovim.git">Awesome Neovim</a> 上逛逛，這裡收錄了 Neovim 大部分常用、好用的外掛，按功能分類，查找起來非常方便。</p>
<p><big>上一篇： <a href="/2024/06/18/neovim-setup-20240618-nvim-keymaps/" title="Neovim 快捷鍵設定">Neovim 快捷鍵設定</a></big><br><big>下一篇： <a href="/2024/06/21/neovim-setup-20240621-nvim-colorscheme/" title="第一個外掛 —— 顔色主題 Colorscheme">第一個外掛 —— 顔色主題 Colorscheme</a></big></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://github.com/folke/lazy.nvim">lazy.nvim</a></li>
<li><a href="https://github.com/wbthomason/packer.nvim">packer.nvim</a></li>
<li><a href="https://github.com/lewis6991/pckr.nvim">pckr.nvim</a></li>
<li><a href="https://youtu.be/N-RFCfs6rxI?si=aYkRso0Kfmv1wQZI">Understanding Neovim #2 - Plugins, Colorschemes</a></li>
</ul>
]]></content>
      <categories>
        <category>Neovim</category>
      </categories>
      <tags>
        <tag>Neovim</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Mining Projects</title>
    <url>/2024/03/14/projects-20240314-Data-Mining-Projects/</url>
    <content><![CDATA[<h2 align="center"><i class="fa-solid fa-magnifying-glass-chart"></i> Mini Project</h2>

<h3 id="主題：Pima-Indians-Diabetes-Database-Classification"><a href="#主題：Pima-Indians-Diabetes-Database-Classification" class="headerlink" title="主題：Pima Indians Diabetes Database Classification"></a>主題：Pima Indians Diabetes Database Classification</h3><p>專題連結：<a href="https://github.com/Imp1ication/Data-Mining-mini-project">Data Mining mini project</a></p>
<h4 id="內容說明："><a href="#內容說明：" class="headerlink" title="內容說明："></a>內容說明：</h4><p>完成 <a href="https://www.kaggle.com/competitions/diabetes-classification/overview">Kaggle Competition: Diabetes Classification</a> 並撰寫一份詳細報告，對資料集特徵進行說明與分析，以及解釋實做方式與結果。</p>
<h4 id="實做摘要："><a href="#實做摘要：" class="headerlink" title="實做摘要："></a>實做摘要：</h4><p>首先，我在報告中對資料集 Pima Indians Diabetes 進行了完整的特徵說明與分類，並做了初步的缺失值檢查。</p>
<p>接著，我對特徵進行了異常值分析處理、計算了各特徵的 Person Correlation Coefficient 以進行關聯性分析、並使用了 StandardScaler 來將特徵的數值標準化。</p>
<p>最後，我使用 Scikit-learn 中的 Logistic Regression 進行分類實做，並觀察 Confusion Matrix 與計算 Precision、Recall、F1 Score、以及各特徵的回歸係數，以進行結果分析。</p>
<p>另外，報告中使用了數張 Matplotlib 圖表進行了資料的視覺化分析。</p>
<h4 id="技術："><a href="#技術：" class="headerlink" title="技術："></a>技術：</h4><ul>
<li>Python3：主要使用語言。</li>
<li>Scikit-learn：資料分析與機器學習套件。</li>
<li>Matplotlib：圖表繪製。</li>
<li>Classification：使用了 Logistic Regression 作為分類方法。</li>
</ul>
<hr>
<h2 align="center"><i class="fa-solid fa-magnifying-glass-chart"></i> Final Project</h2>

<h3 id="主題：K-Means-Clustering-and-hit-song-science"><a href="#主題：K-Means-Clustering-and-hit-song-science" class="headerlink" title="主題：K-Means Clustering and hit song science"></a>主題：K-Means Clustering and hit song science</h3><p>專題連結：<a href="https://github.com/Imp1ication/data_mining_final_project">Data Mining Final Project</a></p>
<h4 id="內容說明：-1"><a href="#內容說明：-1" class="headerlink" title="內容說明："></a>內容說明：</h4><ol>
<li><p>實做 K-Means Clustering 類別，包含不同的算法策略，並對其進行效能分析。接著，</p>
</li>
<li><p>對資料集 <a href="https://www.kaggle.com/datasets/multispiros/34740-hit-and-nonhit-songs-spotify-features/data">Hit song science</a> 進行分群分析，並撰寫一份完整的分析報告。</p>
</li>
</ol>
<h4 id="實做摘要：-1"><a href="#實做摘要：-1" class="headerlink" title="實做摘要："></a>實做摘要：</h4><p>我參照 Scikit-learn 的 K-Means 類別界面實做了一個完整的 K-Means 類別，以及一個用以回傳結果的資料類別，其包含了數種可調參數、兩種初始化中心算法 <code>random</code> 與 <code>kmeans++</code>、兩種迭代算法 <code>lloyd</code> 與 <code>elkan</code>、以及，我還額外實做了平行處理的方法。</p>
<p>然後，我對 K-Means 進行了不同算法組合的性能分析，並使用此類別對資料集 Hit song science 進行了完整的分群分析。</p>
<h4 id="技術：-1"><a href="#技術：-1" class="headerlink" title="技術："></a>技術：</h4><ul>
<li>Python3：主要使用語言。</li>
<li>Scikit-learn：資料分析與機器學習套件。</li>
<li>Matplotlib：圖表繪製。</li>
<li>Clustering：K-Means 分群分析。</li>
<li>multiprocessing：在算法中額外進行了平行處理。</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>Projects</category>
      </categories>
      <tags>
        <tag>NTNU</tag>
        <tag>Project</tag>
        <tag>Python3</tag>
        <tag>Data Mining</tag>
      </tags>
  </entry>
  <entry>
    <title>《大學排名與熱門領域討論站》</title>
    <url>/2024/03/15/projects-20240314-LATIA112-1-Final/</url>
    <content><![CDATA[<h2 id="主題：《大學排名與熱門領域討論站》"><a href="#主題：《大學排名與熱門領域討論站》" class="headerlink" title="主題：《大學排名與熱門領域討論站》"></a>主題：《大學排名與熱門領域討論站》</h2><p>專題程式連結：<a href="https://github.com/LATIA112-1-Finial-Project">LATIA112-1-Finial-Project</a></p>
<p>網頁Demo影片：</p>
<div align="center">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/vji-Jr7m3Fs?si=URe0rJxizokf6IyJ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div>

<p>專題講解影片：</p>
<div align="center">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/7zxP9zIWnw0?si=e0Xkc7MMVcL1fWp1" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div>

<h4 id="內容說明："><a href="#內容說明：" class="headerlink" title="內容說明："></a>內容說明：</h4><p>本專題為臺師大「學習分析工具實務應用」課程期末小組專題之成果，並於後續投稿了「臺師大教育數據啓航創意競賽－實踐創作組」，最終晉級決賽並獲得佳作。</p>
<p>本網站目的為解決網路上大學排名與領域趨勢雜亂、資料不易比對之問題，以利學生客製化並省時選擇未來目標。特色功能有：使用者創建帳號後，可透過互動圖表自定義交叉比較，並收藏最愛，更設有討論串促進資訊交流。</p>
<h4 id="實做摘要："><a href="#實做摘要：" class="headerlink" title="實做摘要："></a>實做摘要：</h4><ol>
<li><p>使用爬蟲技術（Selenium、Scrapy）將大學排名網站的資料與論文刊登數爬下來。</p>
</li>
<li><p>將有缺失與干擾判讀的資料清洗並正規化。</p>
</li>
<li><p>將正規化後的資料存放進資料庫，以便後續使用語法與 API 取出對應資料。</p>
</li>
<li><p>將取出的資料透過視覺化工具呈現。</p>
</li>
<li><p>視覺化的呈現需要有互動增減欲觀察資料、加入最愛等功能，以利客製化與可重複使用性。</p>
</li>
</ol>
<h4 id="負責內容："><a href="#負責內容：" class="headerlink" title="負責內容："></a>負責內容：</h4><ol>
<li><p>使用 Python3 爬蟲技術爬取 <a href="https://www.topuniversities.com/">Top University</a> 與 <a href="https://arxiv.org/">Arxiv</a> 資訊。</p>
</li>
<li><p>將爬取後的資料進行清洗與正規化。</p>
</li>
</ol>
<h4 id="技術："><a href="#技術：" class="headerlink" title="技術："></a>技術：</h4><ul>
<li>Python3：主要使用語言。</li>
<li>Web Crawler：使用了 Selenium 與 Scrapy 進行爬蟲。</li>
<li>Data Cleaning：使用 pandas 進行資料清洗。</li>
</ul>
]]></content>
      <categories>
        <category>Projects</category>
      </categories>
      <tags>
        <tag>NTNU</tag>
        <tag>Project</tag>
        <tag>Python3</tag>
        <tag>Web Crawler</tag>
      </tags>
  </entry>
</search>
